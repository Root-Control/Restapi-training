var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/AppGateway.html",[0,0.198,1,2.407]],["body/classes/AppGateway.html",[0,0.247,1,3.806,2,2.533,3,0.215,4,0.184,5,0.154,6,3.744,7,1.818,8,5.22,9,0.313,10,1.148,11,3.827,12,0.783,13,5.49,14,1.117,15,0.744,16,5.573,17,2.745,18,0.022,19,5.22,20,4.391,21,0.617,22,1.607,23,0.533,24,3.744,25,4.752,26,3.744,27,3.318,28,3.318,29,2.999,30,3.744,31,3.744,32,0.215,33,2.999,34,4.391,35,4.391,36,3.744,37,2.999,38,4.391,39,4.391,40,4.391,41,2.999,42,4.391,43,4.391,44,4.391,45,4.391,46,4.391,47,4.391,48,2.999,49,4.391,50,4.391,51,0.013,52,0.017,53,0.013]],["title/modules/AppModule.html",[54,1.29,55,2.407]],["body/modules/AppModule.html",[0,0.211,1,3.439,3,0.184,4,0.158,5,0.132,7,1.226,12,0.528,15,0.457,18,0.022,21,0.528,22,1.376,23,0.602,32,0.184,51,0.011,52,0.015,53,0.011,54,2.078,55,4.797,56,2.515,57,2.013,58,2.349,59,2.349,60,2.013,61,2.905,62,2.168,63,3.205,64,3.205,65,4.069,66,4.069,67,3.486,68,3.755,69,3.147,70,2.168,71,2.349,72,3.759,73,3.439,74,2.567,75,3.439,76,4.142,77,3.759,78,0.565,79,0.528,80,0.358,81,0.565,82,3.439,83,3.205,84,3.439,85,2.567,86,0.528,87,3.759,88,3.759,89,3.759,90,3.147,91,3.759,92,3.759,93,3.759,94,2.567,95,3.759,96,3.439,97,3.759,98,3.439,99,3.759,100,1.877,101,3.759,102,2.84]],["title/injectables/ArticleIdMiddleware.html",[103,0.251,104,2.407]],["body/injectables/ArticleIdMiddleware.html",[0,0.215,3,0.188,4,0.161,5,0.134,7,1.248,9,0.273,10,1.05,12,0.716,14,1.046,15,0.696,18,0.022,21,0.537,23,0.569,32,0.188,51,0.012,52,0.015,53,0.012,78,0.576,79,0.537,80,0.365,81,0.576,86,0.537,103,0.363,104,3.48,105,1.053,106,3.262,107,1.869,108,4.885,109,1.406,110,1.978,111,5.096,112,4.345,113,3.272,114,3.051,115,1.668,116,3.826,117,1.57,118,2.392,119,2.545,120,1.053,121,1.114,122,1.76,123,2.891,124,1.485,125,1.053,126,2.207,127,3.262,128,3.185,129,3.262,130,1.911,131,2.392,132,1.322,133,3.268,134,2.101,135,2.049,136,2.891,137,2.049,138,2.613,139,2.891,140,3.48,141,2.049,142,2.613,143,1.114,144,1.578,145,2.392,146,3.262,147,3.262,148,3.826,149,1.181,150,3.185,151,3.826,152,3.85,153,1.179,154,3.826,155,3.826,156,3.262]],["title/controllers/ArticlesController.html",[157,1.761,158,2.407]],["body/controllers/ArticlesController.html",[0,0.144,3,0.126,4,0.108,5,0.09,9,0.182,12,0.539,15,0.697,17,3.585,18,0.022,21,0.805,23,0.476,32,0.126,51,0.008,52,0.012,53,0.008,54,0.937,78,0.863,79,0.805,81,0.863,86,0.36,100,1.279,107,1.25,109,1.686,120,0.704,133,3.365,134,2.104,135,1.372,137,2.053,142,3.732,143,1.115,149,1.329,153,1.683,157,2.295,158,2.618,159,2.183,160,1.935,161,4.128,162,3.472,163,3.834,164,3.834,165,3.918,166,3.834,167,3.834,168,2.561,169,2.561,170,5.19,171,2.561,172,2.286,173,2.561,174,2.561,175,2.561,176,2.561,177,2.561,178,2.561,179,2.561,180,2.561,181,2.561,182,2.561,183,2.561,184,2.561,185,2.561,186,2.561,187,2.561,188,3.139,189,3.269,190,2.183,191,4.128,192,2.183,193,1.935,194,2.212,195,2.183,196,3.472,197,1.477,198,1.935,199,2.779,200,1.935,201,2.397,202,2.561,203,2.561,204,2.183,205,2.561,206,0.996,207,2.561,208,3.527,209,2.183,210,2.183,211,1.935,212,2.183,213,2.183,214,2.183,215,2.183,216,1.601,217,5.069,218,4.595,219,1.867,220,4.889,221,2.561,222,2.561,223,0.994,224,2.561,225,3.918,226,2.561,227,2.561,228,2.561,229,2.561,230,5.102,231,2.561,232,2.561,233,2.561,234,2.561,235,2.561,236,2.896,237,2.561,238,2.561,239,2.561,240,2.561,241,2.561,242,2.561]],["title/classes/ArticlesGateway.html",[0,0.198,201,2.203]],["body/classes/ArticlesGateway.html",[0,0.21,2,2.159,3,0.183,4,0.157,5,0.131,7,1.637,8,4.83,9,0.267,10,1.035,11,3.541,12,0.705,13,5.162,14,1.034,15,0.79,17,3.138,18,0.022,19,4.83,21,0.85,22,1.37,23,0.493,24,3.19,25,4.28,26,3.19,27,2.827,28,2.827,29,2.556,30,3.19,31,3.19,32,0.183,36,3.19,48,2.556,51,0.011,52,0.015,53,0.011,78,0.852,79,0.796,81,0.852,133,2.508,149,1.313,157,1.869,161,3.793,201,3.138,243,3.19,244,5.02,245,5.02,246,5.02,247,5.02,248,3.742,249,5.02,250,4.83,251,5.02,252,3.742,253,2.827,254,5.02,255,3.742,256,5.02,257,3.742,258,2.827,259,5.02,260,3.138,261,3.742,262,3.742,263,2.827,264,3.742,265,2.827,266,3.19,267,3.19,268,5.02,269,2.556,270,2.556,271,3.742,272,3.742,273,2.827,274,3.742,275,3.742]],["title/modules/ArticlesModule.html",[54,1.29,65,2.203]],["body/modules/ArticlesModule.html",[0,0.208,3,0.181,4,0.155,5,0.13,7,1.204,12,0.699,14,0.674,15,0.449,18,0.022,21,0.519,22,1.352,23,0.586,32,0.181,51,0.011,52,0.015,53,0.011,54,2.204,56,1.845,57,1.978,58,2.309,59,2.309,60,1.978,61,3.247,62,2.871,65,4.206,67,3.468,69,3.11,70,2.131,71,2.309,73,3.399,74,2.522,75,3.399,76,4.113,78,0.555,79,0.519,80,0.352,81,0.555,82,3.399,84,3.399,85,2.522,86,0.519,90,2.309,100,2.485,102,3.759,104,2.522,134,1.523,135,1.978,158,3.844,161,2.79,194,3.736,195,3.149,201,3.11,276,3.149,277,3.693,278,3.149,279,3.693,280,3.399,281,3.693,282,3.693,283,4.252,284,3.693,285,3.693,286,3.693,287,3.149,288,2.522,289,3.693,290,3.149,291,3.693,292,2.79,293,3.693,294,3.759,295,3.399,296,3.693,297,3.693,298,3.693,299,3.149,300,3.759,301,3.149,302,3.149,303,2.79,304,2.79,305,3.149,306,3.149]],["title/injectables/ArticlesService.html",[103,0.251,194,2.033]],["body/injectables/ArticlesService.html",[0,0.16,3,0.14,4,0.12,5,0.1,9,0.203,10,0.856,12,0.583,14,0.521,15,0.782,18,0.023,21,0.803,23,0.569,32,0.14,51,0.009,52,0.013,53,0.009,78,0.859,79,0.803,80,0.272,81,0.859,86,0.401,103,0.296,105,0.785,107,2.131,108,4.175,109,1.684,117,1.896,120,0.785,121,0.831,122,1.434,124,1.108,125,0.785,126,1.646,127,2.433,128,2.596,129,2.433,131,1.784,132,0.986,133,2.686,143,0.624,144,2.217,145,1.784,146,2.433,147,2.433,149,1.324,153,1.761,162,3.138,165,4.585,190,3.541,191,3.138,194,2.396,206,0.742,223,2.218,307,2.433,308,3.344,309,4.153,310,2.433,311,4.153,312,4.153,313,2.854,314,4.153,315,2.854,316,2.854,317,4.153,318,4.073,319,2.854,320,4.153,321,2.854,322,2.854,323,2.854,324,1.949,325,1.949,326,2.433,327,1.529,328,1.334,329,1.949,330,2.433,331,1.949,332,2.433,333,1.949,334,2.433,335,2.433,336,1.529,337,2.433,338,2.854,339,2.854,340,2.854,341,3.572,342,4.872,343,4.872,344,4.872,345,2.854,346,2.854,347,2.854,348,2.854,349,2.854,350,2.854,351,2.854,352,2.854]],["title/controllers/AuthController.html",[157,1.761,353,2.407]],["body/controllers/AuthController.html",[0,0.141,3,0.123,4,0.105,5,0.088,9,0.178,12,0.529,15,0.781,17,4.018,18,0.022,21,0.903,23,0.513,32,0.123,51,0.008,52,0.011,53,0.008,78,0.913,79,0.853,80,0.578,81,0.913,86,0.351,100,1.249,109,1.762,117,2.171,121,0.728,149,1.489,153,1.98,157,1.249,160,1.889,172,2.35,188,1.708,193,1.889,197,1.442,198,1.889,199,1.169,200,1.889,206,0.65,353,2.572,354,2.132,355,2.5,356,3.211,357,3.211,358,5.041,359,4.298,360,3.766,361,3.766,362,3.766,363,3.766,364,3.766,365,4.298,366,3.211,367,2.5,368,3.766,369,2.5,370,4.764,371,2.5,372,3.766,373,2.5,374,3.766,375,2.5,376,3.766,377,2.5,378,2.5,379,3.766,380,2.5,381,2.5,382,3.766,383,2.5,384,2.5,385,3.766,386,2.5,387,2.5,388,3.766,389,2.5,390,2.5,391,3.766,392,2.5,393,3.766,394,2.5,395,2.5,396,3.766,397,2.5,398,2.5,399,1.889,400,2.426,401,1.889,402,1.563,403,2.132,404,2.5,405,1.563,406,2.5,407,2.5,408,2.5,409,5.041,410,2.5,411,2.5,412,2.5,413,2.5,414,2.5,415,2.5,416,2.5,417,2.5,418,2.5,419,2.5,420,2.5,421,2.5,422,2.5]],["title/modules/AuthModule.html",[54,1.29,66,2.203]],["body/modules/AuthModule.html",[0,0.181,3,0.158,4,0.135,5,0.113,7,1.049,12,0.452,14,0.587,15,0.391,18,0.022,21,0.452,22,1.177,23,0.6,32,0.158,51,0.01,52,0.014,53,0.01,54,2.079,56,1.607,57,1.723,58,2.011,59,2.011,60,1.723,61,3.019,62,1.856,66,4.429,68,3.581,69,2.828,70,1.856,71,2.011,73,3.09,74,2.197,75,3.09,76,3.879,78,0.484,79,0.452,80,0.306,81,0.484,82,4.239,84,3.09,85,2.197,86,0.452,100,2.26,280,3.09,290,2.742,292,2.43,353,3.575,400,3.325,401,2.43,423,2.742,424,3.217,425,2.742,426,3.88,427,3.88,428,3.88,429,3.88,430,3.88,431,3.217,432,3.217,433,3.217,434,1.723,435,3.217,436,3.217,437,3.217,438,3.217,439,3.217,440,3.217,441,3.217,442,3.217,443,3.418,444,3.217,445,3.217,446,2.197,447,3.217,448,2.011,449,3.217,450,2.197,451,3.217,452,3.217,453,3.217,454,3.217,455,2.742,456,4.842,457,3.879,458,3.217,459,3.217,460,3.217,461,3.217,462,3.217,463,3.217,464,3.217]],["title/injectables/AuthService.html",[103,0.251,400,1.888]],["body/injectables/AuthService.html",[0,0.079,3,0.069,4,0.059,5,0.049,9,0.1,10,0.49,12,0.334,14,0.434,15,0.705,18,0.023,21,0.743,23,0.513,32,0.069,51,0.004,52,0.007,53,0.004,78,0.739,79,0.69,80,0.552,81,0.739,86,0.198,103,0.169,105,0.388,107,1.949,109,1.651,113,2.834,115,1.431,117,1.577,120,0.388,121,0.41,122,0.822,124,0.547,125,0.388,132,0.487,134,0.581,143,1.366,144,0.581,145,0.881,149,1.493,153,0.733,188,3.195,199,0.659,206,0.942,219,1.13,223,1.706,308,2.108,318,3.195,324,0.962,325,0.962,327,0.755,333,0.962,334,1.201,335,1.201,336,0.755,338,0.704,340,0.704,341,0.881,342,1.201,343,1.201,344,1.201,356,2.028,357,2.028,359,3.092,365,3.092,366,2.028,370,4.183,400,1.274,402,0.881,403,1.201,448,0.881,450,2.108,465,1.201,466,3.199,467,1.542,468,2.379,469,2.379,470,2.379,471,2.379,472,3.626,473,1.201,474,2.092,475,2.108,476,2.092,477,2.108,478,2.092,479,2.379,480,2.028,481,2.379,482,1.799,483,1.409,484,2.379,485,1.409,486,2.379,487,1.754,488,1.409,489,2.379,490,1.409,491,2.379,492,1.409,493,2.379,494,1.409,495,1.201,496,1.409,497,1.409,498,1.409,499,2.379,500,3.626,501,1.409,502,4.051,503,1.409,504,1.409,505,3.087,506,1.201,507,0.581,508,0.962,509,0.962,510,0.962,511,0.755,512,1.201,513,2.108,514,1.201,515,1.201,516,0.962,517,1.625,518,1.201,519,0.981,520,0.813,521,1.409,522,1.201,523,1.409,524,1.409,525,1.112,526,0.659,527,1.409,528,1.409,529,3.626,530,2.379,531,1.487,532,1.409,533,0.881,534,2.379,535,0.881,536,2.379,537,0.813,538,0.755,539,1.409,540,0.755,541,1.409,542,0.813,543,1.409,544,1.201,545,0.881,546,0.704,547,0.881,548,1.487,549,1.065,550,1.409,551,1.409,552,1.893,553,2.379,554,1.409,555,1.797,556,1.409,557,1.409,558,3.087,559,2.379,560,2.379,561,1.409,562,4.677,563,1.409,564,1.409,565,1.409,566,1.409,567,1.409,568,1.409,569,1.409,570,3.626,571,3.626,572,1.409,573,3.866,574,1.409,575,4.677,576,4.677,577,3.626,578,2.379,579,1.409,580,3.626,581,2.74,582,3.626,583,3.626,584,4.915,585,3.626,586,3.808,587,2.354,588,4.394,589,3.087,590,1.409,591,2.028,592,1.797,593,2.028,594,1.797,595,2.028,596,1.409,597,1.409,598,2.379,599,1.409,600,1.409,601,1.409,602,2.379,603,2.379,604,1.409,605,1.409,606,1.409,607,1.409,608,1.409,609,1.409,610,1.409,611,0.962,612,1.201,613,0.962,614,1.201,615,1.409,616,1.065,617,1.409,618,1.409,619,1.487,620,1.065,621,1.409,622,1.409,623,1.409,624,1.409,625,1.409,626,1.409,627,1.409,628,2.379,629,3.087,630,1.409,631,2.379,632,2.379,633,1.409]],["title/modules/DatabaseModule.html",[54,1.29,67,1.888]],["body/modules/DatabaseModule.html",[0,0.297,3,0.259,4,0.222,5,0.185,18,0.022,23,0.543,32,0.259,51,0.016,52,0.019,53,0.016,54,2.284,56,2.638,61,3.046,62,3.046,67,3.342,86,0.742,634,5.28,635,5.018,636,5.28]],["title/classes/DoStuff.html",[0,0.198,637,2.663]],["body/classes/DoStuff.html",[0,0.28,2,2.876,3,0.244,4,0.209,5,0.175,14,1.183,15,0.606,18,0.022,23,0.586,32,0.244,51,0.015,52,0.018,53,0.015,86,0.7,103,0.355,117,1.858,120,1.372,121,1.451,122,1.722,125,1.372,324,3.405,325,3.405,326,4.251,336,2.67,637,4.555,638,4.251,639,4.985,640,4.985,641,4.251,642,4.251]],["title/classes/EnvironmentService.html",[0,0.198,643,2.033]],["body/classes/EnvironmentService.html",[0,0.25,2,2.567,3,0.218,4,0.187,5,0.156,9,0.317,10,1.158,12,0.789,14,0.812,15,0.749,18,0.022,21,0.625,23,0.489,32,0.218,51,0.013,52,0.017,53,0.013,78,0.845,79,0.789,80,0.617,81,0.845,107,2.009,149,1.031,206,1.601,487,1.85,495,3.793,619,2.781,643,3.242,644,3.793,645,6.159,646,5.619,647,5.619,648,4.449,649,5.619,650,4.449,651,4.449,652,3.793,653,4.449,654,4.449,655,4.449,656,4.449,657,4.449,658,4.449]],["title/injectables/FacebookStrategy.html",[103,0.251,426,2.203]],["body/injectables/FacebookStrategy.html",[0,0.169,3,0.148,4,0.126,5,0.106,9,0.214,10,0.89,12,0.606,14,0.55,15,0.613,18,0.023,21,0.423,22,1.58,23,0.557,32,0.148,51,0.009,52,0.013,53,0.009,78,0.453,79,0.606,80,0.287,81,0.453,86,0.423,103,0.307,105,0.828,107,2.04,109,0.739,110,1.169,115,1.257,117,1.33,120,0.828,121,0.877,122,1.491,124,1.169,125,0.828,132,1.04,134,1.78,143,1.205,144,1.241,149,1.17,153,1.33,172,1.04,206,0.783,219,1.102,223,1.676,328,1.407,338,1.504,340,1.504,426,2.699,434,1.613,467,2.521,473,2.567,474,3.18,480,3.681,482,1.58,487,1.312,507,1.241,508,2.056,511,1.613,512,2.567,513,2.056,519,1.78,520,1.737,525,1.407,526,1.407,533,1.882,535,1.882,537,2.491,538,3.49,540,2.953,545,1.882,547,3.155,548,1.882,552,1.407,586,2.056,659,2.275,660,3.765,661,4.317,662,3.011,663,3.262,664,2.056,665,3.447,666,3.011,667,2.056,668,3.011,669,2.056,670,1.737,671,2.567,672,3.011,673,2.567,674,3.011,675,3.011,676,3.011,677,3.011,678,3.262,679,3.262,680,2.275,681,1.882,682,1.613,683,4.303,684,2.567,685,2.567,686,2.567,687,3.011,688,3.011,689,3.011,690,3.011,691,3.813,692,1.882,693,2.699,694,2.567,695,2.567,696,3.681,697,2.567,698,2.567,699,4.303,700,2.056,701,3.011,702,3.011,703,3.681,704,2.567,705,2.567,706,2.056,707,2.567,708,3.011,709,3.011,710,3.011,711,3.011,712,3.011,713,3.011]],["title/injectables/GoogleStrategy.html",[103,0.251,427,2.203]],["body/injectables/GoogleStrategy.html",[0,0.18,3,0.156,4,0.134,5,0.112,9,0.227,10,0.927,12,0.632,14,0.583,15,0.633,18,0.022,21,0.448,22,1.647,23,0.575,32,0.156,51,0.01,52,0.014,53,0.01,78,0.48,79,0.448,80,0.304,81,0.48,86,0.448,103,0.321,105,0.878,107,2.075,109,0.784,110,1.239,115,0.929,117,1.387,120,0.878,121,0.929,122,1.554,124,1.239,125,0.878,132,1.103,134,1.316,143,1.237,144,1.316,149,0.74,153,1.387,162,2.412,172,1.103,206,0.83,219,1.647,223,1.747,250,2.722,328,1.492,338,1.595,340,1.595,341,1.996,427,2.813,434,1.71,467,2.604,477,3.074,478,3.265,482,1.168,487,1.17,507,1.316,510,2.18,511,1.71,513,2.18,515,2.722,519,1.855,520,1.842,525,1.492,526,1.492,533,1.996,535,1.996,537,1.842,538,2.41,540,1.71,545,2.813,547,3.258,548,1.996,552,1.492,591,2.722,612,2.722,614,2.722,660,3.866,664,2.18,667,2.18,669,2.18,670,1.842,671,2.722,673,2.722,678,3.4,679,3.4,680,3.4,681,1.996,682,1.71,683,3.837,684,2.722,685,2.722,686,2.722,691,3.938,692,1.996,693,2.813,694,2.722,695,2.722,696,2.722,697,2.722,698,2.722,700,2.18,704,2.722,705,2.722,706,2.18,714,4.276,715,2.412,716,3.192,717,4.5,718,3.192,719,4.5,720,2.722,721,3.4,722,3.074,723,2.412,724,3.192,725,3.192,726,3.192,727,3.192,728,3.192,729,4.5,730,4.5,731,3.192,732,4.5,733,3.192]],["title/interfaces/IArticle.html",[126,2.033,734,0.916]],["body/interfaces/IArticle.html",[3,0.234,4,0.2,5,0.168,9,0.34,10,1.21,18,0.022,23,0.416,32,0.234,51,0.014,52,0.018,53,0.014,80,0.606,125,1.314,126,3.388,133,2.933,208,2.755,487,1.802,581,5.013,734,1.653,735,2.094,736,4.071,737,5.872,738,4.437,739,5.422,740,5.013,741,5.657,742,4.805]],["title/interfaces/IConfig.html",[734,0.916,743,2.203]],["body/interfaces/IConfig.html",[3,0.149,4,0.128,5,0.107,9,0.216,10,0.895,15,0.369,18,0.022,23,0.378,32,0.149,33,3.464,37,2.075,41,3.464,51,0.009,52,0.013,53,0.009,80,0.414,141,1.627,143,1.109,208,1.753,223,1.179,263,4.182,265,3.832,269,2.075,270,3.781,273,3.283,487,1.722,546,1.517,619,2.716,643,2.506,734,1.522,735,1.332,743,3.808,744,2.075,745,5.065,746,3.704,747,4.33,748,3.704,749,3.704,750,3.704,751,3.704,752,3.704,753,3.704,754,3.704,755,3.704,756,3.832,757,3.832,758,3.704,759,3.832,760,3.704,761,4,762,4,763,3.038,764,3.038,765,2.59,766,2.075,767,2.59,768,2.295,769,2.59,770,2.59,771,2.59,772,2.59,773,2.59,774,2.59,775,2.59,776,4,777,3.832,778,3.832,779,3.832,780,2.967,781,3.832,782,4,783,3.832,784,3.832,785,3.832,786,3.832,787,3.832,788,2.295,789,3.283,790,2.295,791,2.295,792,2.295,793,2.295,794,2.295,795,2.295,796,2.295,797,2.295,798,2.295,799,2.295,800,2.295,801,2.295,802,2.967,803,3.283,804,3.283,805,2.295,806,2.295,807,2.295,808,2.295,809,2.075,810,3.283,811,3.283,812,2.295,813,2.295,814,2.295,815,2.295,816,2.295]],["title/interfaces/IEnvironmentConfig.html",[734,0.916,747,2.203]],["body/interfaces/IEnvironmentConfig.html",[3,0.138,4,0.118,5,0.099,9,0.2,10,0.847,18,0.022,23,0.358,32,0.138,33,3.315,37,1.92,41,2.806,51,0.008,52,0.012,53,0.008,80,0.629,141,1.506,143,1.061,208,1.622,223,1.091,263,4.291,265,3.667,269,1.92,270,3.647,273,2.124,487,1.855,546,1.404,619,1.757,643,2.37,734,1.476,735,1.233,743,3.338,744,1.92,745,4.985,746,2.397,747,4.069,748,2.397,749,2.397,750,2.397,751,2.397,752,2.397,753,2.397,754,2.397,755,2.397,756,3.104,757,3.104,758,2.397,759,3.104,760,2.397,761,2.806,762,2.806,765,2.397,766,1.92,767,2.397,768,2.124,769,3.502,770,3.502,771,3.502,772,3.502,773,3.502,774,3.502,775,3.502,776,4.29,777,4.482,778,4.482,779,4.482,780,4.051,781,4.482,782,4.29,783,4.482,784,4.482,785,4.482,786,4.482,787,4.482,788,2.124,789,3.104,790,2.124,791,2.124,792,2.124,793,2.124,794,2.124,795,2.124,796,2.124,797,2.124,798,2.124,799,2.124,800,2.124,801,2.124,802,2.806,803,3.104,804,3.104,805,2.124,806,2.124,807,2.124,808,2.124,809,1.92,810,3.104,811,3.104,812,2.124,813,2.124,814,2.124,815,2.124,816,2.124]],["title/interfaces/IFacebookConfig.html",[474,2.033,734,0.916]],["body/interfaces/IFacebookConfig.html",[3,0.225,4,0.192,5,0.161,9,0.326,10,1.179,18,0.022,32,0.225,51,0.014,52,0.017,53,0.014,80,0.654,206,1.784,474,3.302,487,1.911,611,4.466,613,4.466,734,1.191,735,2.009,817,3.906,818,3.129,819,4.466,820,4.466,821,4.466,822,5.575]],["title/interfaces/IGoogleConfig.html",[478,2.033,734,0.916]],["body/interfaces/IGoogleConfig.html",[3,0.213,4,0.182,5,0.153,9,0.31,10,1.141,18,0.022,32,0.213,51,0.013,52,0.017,53,0.013,80,0.664,206,1.811,478,3.194,487,1.921,611,4.381,613,4.381,616,4.847,734,1.13,735,1.906,818,2.969,819,4.381,820,4.381,821,4.381,823,3.706,824,5.469,825,5.469]],["title/interfaces/IJwtPayload.html",[734,0.916,826,2.407]],["body/interfaces/IJwtPayload.html",[3,0.244,4,0.209,5,0.175,9,0.355,10,1.242,18,0.021,32,0.244,51,0.015,52,0.018,53,0.015,80,0.618,206,1.684,487,1.684,734,1.296,735,2.186,780,4.785,826,4.118,827,4.251,828,4.251,829,6.733,830,6.733,831,6.733]],["title/interfaces/IToken.html",[402,2.203,734,0.916]],["body/interfaces/IToken.html",[3,0.26,4,0.223,5,0.187,9,0.378,10,1.291,18,0.021,32,0.26,51,0.016,52,0.019,53,0.016,80,0.506,206,1.381,402,3.915,487,1.731,552,3.214,734,1.381,735,2.33,832,4.53]],["title/interfaces/ITwitterConfig.html",[476,2.033,734,0.916]],["body/interfaces/ITwitterConfig.html",[3,0.225,4,0.192,5,0.161,9,0.326,10,1.179,18,0.022,32,0.225,51,0.014,52,0.017,53,0.014,80,0.654,206,1.784,476,3.302,487,1.911,592,4.94,594,4.94,734,1.191,735,2.009,818,3.129,819,4.466,820,4.466,821,4.466,833,3.906,834,5.575]],["title/interfaces/IUser.html",[482,1.29,734,0.916]],["body/interfaces/IUser.html",[3,0.176,4,0.151,5,0.126,9,0.256,10,1.008,18,0.022,23,0.313,32,0.176,51,0.011,52,0.015,53,0.011,80,0.682,125,0.99,199,2.785,482,1.79,487,1.922,531,3.725,533,3.725,535,3.725,537,3.437,538,3.191,540,3.191,542,3.437,545,3.725,547,3.725,549,4.502,620,4.196,700,4.07,734,0.935,735,1.578,738,3.694,739,4.735,740,4.502,742,4.855,835,3.068,836,5.08,837,5.08,838,5.08,839,5.08,840,4.855]],["title/classes/IoConnector.html",[0,0.198,841,2.663]],["body/classes/IoConnector.html",[0,0.255,2,2.615,3,0.222,4,0.19,5,0.159,9,0.323,11,2.833,12,0.799,14,0.827,15,0.691,18,0.022,21,0.637,22,1.659,23,0.495,32,0.222,51,0.014,52,0.017,53,0.014,78,0.682,79,0.637,81,0.682,86,0.637,107,1.478,120,1.247,130,2.264,143,0.991,206,1.478,253,3.424,258,3.424,260,3.883,267,4.847,324,3.096,325,3.096,405,2.833,466,3.554,841,4.295,842,5.296,843,3.864,844,6.514,845,4.532,846,4.532,847,4.532,848,4.532,849,3.864,850,4.532,851,4.532,852,4.532,853,4.532,854,4.532,855,4.532,856,4.532,857,4.532]],["title/injectables/JwtStrategy.html",[103,0.251,428,2.203]],["body/injectables/JwtStrategy.html",[0,0.226,3,0.197,4,0.169,5,0.141,9,0.286,12,0.739,14,0.733,15,0.639,18,0.022,21,0.564,23,0.588,32,0.197,51,0.012,52,0.016,53,0.012,78,0.791,79,0.739,80,0.501,81,0.791,86,0.564,103,0.375,105,1.105,109,1.44,115,1.708,118,3.289,132,1.387,143,0.878,149,0.931,153,1.238,206,1.044,219,2.148,280,4.008,327,2.151,399,3.035,400,3.552,401,3.035,405,2.511,428,3.289,434,2.151,457,2.744,482,1.926,511,2.151,555,3.035,681,3.668,693,2.511,738,3.035,826,4.253,858,3.425,859,3.594,860,4.017,861,4.017,862,5.262,863,4.017,864,4.017,865,4.017,866,4.017,867,3.425,868,3.425,869,4.017,870,4.017,871,4.017,872,4.017,873,4.017,874,4.017,875,4.017,876,4.017,877,3.425]],["title/injectables/LocalStrategy.html",[103,0.251,429,2.203]],["body/injectables/LocalStrategy.html",[0,0.205,3,0.179,4,0.153,5,0.128,9,0.26,10,1.018,12,0.694,14,1.021,15,0.68,18,0.022,21,0.513,22,1.808,23,0.592,32,0.179,51,0.011,52,0.015,53,0.011,86,0.513,103,0.352,105,1.005,107,2.105,109,0.897,110,1.418,115,1.064,117,1.522,118,2.284,120,1.005,121,1.064,122,1.706,124,1.418,125,1.005,130,1.825,132,1.262,143,1.08,144,1.506,149,1.145,153,1.126,172,1.262,219,2.048,223,1.418,328,1.708,338,1.825,340,1.825,429,3.088,434,2.646,455,3.115,457,3.823,467,2.796,482,1.808,487,1.284,507,1.506,511,1.957,516,2.495,517,2.495,518,3.115,519,2.037,520,2.108,525,1.708,526,1.708,538,3.211,542,3.229,544,3.115,546,1.825,573,2.76,660,4.095,667,2.495,669,2.495,670,2.108,681,2.284,682,1.957,692,2.284,693,2.284,867,4.212,877,4.212,878,3.115,879,4.94,880,3.653,881,3.653,882,3.653,883,3.653,884,3.653,885,3.653,886,3.653,887,3.653]],["title/injectables/LoggerMiddleware.html",[94,2.407,103,0.251]],["body/injectables/LoggerMiddleware.html",[0,0.258,3,0.225,4,0.192,5,0.161,7,1.494,9,0.326,12,0.804,15,0.557,18,0.022,21,0.644,22,1.677,23,0.543,32,0.225,51,0.014,52,0.017,53,0.014,78,0.689,79,0.644,80,0.437,81,0.689,86,0.644,94,3.909,103,0.408,105,1.26,110,2.222,114,3.266,115,1.817,119,2.859,143,1.251,172,1.582,466,2.864,587,3.343,888,3.906,889,3.302,890,4.581,891,3.909,892,3.461,893,3.906,894,5.724,895,3.461,896,3.906,897,4.581,898,4.581,899,4.581,900,4.581,901,4.581,902,4.581]],["title/guards/RolesGuard.html",[197,2.033,903,2.407]],["body/guards/RolesGuard.html",[0,0.237,3,0.206,4,0.177,5,0.148,7,1.372,9,0.3,12,0.762,14,0.768,15,0.659,18,0.022,21,0.591,23,0.472,32,0.206,51,0.013,52,0.016,53,0.013,78,0.815,79,0.762,80,0.517,81,0.815,86,0.591,103,0.386,109,1.473,120,1.157,143,1.385,149,1.256,172,1.453,196,3.178,197,3.128,199,2.534,206,1.093,219,1.984,336,2.253,370,3.703,405,2.629,487,1.093,642,3.586,670,2.427,903,2.873,904,3.586,905,6.337,906,4.206,907,6.715,908,4.206,909,5.422,910,6.337,911,4.206,912,3.586,913,4.206,914,4.206,915,4.206,916,4.206,917,3.178,918,5.422,919,4.206,920,4.206,921,4.206]],["title/injectables/SharedVariables.html",[103,0.251,922,2.663]],["body/injectables/SharedVariables.html",[0,0.246,3,0.214,4,0.183,5,0.153,9,0.311,10,1.145,12,0.78,14,1.115,15,0.781,18,0.022,21,0.614,22,1.599,23,0.484,28,3.301,29,2.984,32,0.214,51,0.013,52,0.017,53,0.013,78,0.657,79,0.614,80,0.416,81,0.657,86,0.614,103,0.396,105,1.202,107,1.992,115,1.272,216,3.472,223,2.156,546,2.182,780,4.39,922,4.197,923,5.658,924,3.725,925,6.107,926,6.107,927,5.555,928,4.369,929,5.555,930,4.369,931,4.736,932,5.555,933,4.369,934,5.555,935,4.369,936,4.369,937,3.301,938,4.369]],["title/injectables/TenantMiddleware.html",[96,2.407,103,0.251]],["body/injectables/TenantMiddleware.html",[0,0.234,3,0.204,4,0.175,5,0.146,7,1.358,9,0.297,12,0.757,14,0.76,15,0.655,18,0.022,21,0.585,23,0.583,32,0.204,51,0.013,52,0.016,53,0.013,78,0.81,79,0.757,80,0.513,81,0.81,86,0.585,90,2.603,96,3.679,103,0.384,105,1.146,107,1.358,109,1.466,110,2.091,113,3.382,114,3.154,115,1.738,117,1.945,119,2.691,120,1.146,121,1.213,124,2.6,125,1.146,132,1.439,143,0.911,172,1.439,206,1.082,328,1.947,587,3.198,682,2.231,889,3.108,891,3.679,893,3.551,939,3.551,940,4.165,941,4.165,942,4.165,943,3.147,944,3.147,945,4.165,946,4.165,947,4.165,948,4.165]],["title/injectables/TokenMiddleware.html",[98,2.407,103,0.251]],["body/injectables/TokenMiddleware.html",[0,0.21,3,0.183,4,0.157,5,0.131,7,1.22,9,0.267,10,1.035,12,0.705,14,1.034,15,0.689,18,0.022,21,0.526,23,0.587,32,0.183,51,0.011,52,0.015,53,0.011,78,0.563,79,0.526,80,0.357,81,0.563,86,0.526,98,3.429,103,0.358,105,1.029,107,1.848,109,1.391,110,1.949,113,3.243,114,3.024,115,1.649,117,1.865,119,2.508,120,1.029,121,1.089,122,1.734,124,1.453,125,1.029,132,1.292,143,1.098,144,1.543,149,0.867,153,1.153,172,1.292,327,2.004,328,1.749,338,1.869,340,1.869,341,2.339,467,2.83,482,1.37,506,3.19,507,1.543,519,2.07,525,1.749,526,1.749,531,2.339,542,2.159,552,2.346,555,2.827,587,3.034,682,2.004,889,2.896,891,3.429,917,3.793,949,3.19,950,5.02,951,3.742,952,3.742,953,3.742,954,3.742,955,5.02,956,5.02,957,3.742,958,3.742,959,3.742]],["title/injectables/TwitterStrategy.html",[103,0.251,430,2.203]],["body/injectables/TwitterStrategy.html",[0,0.194,3,0.169,4,0.145,5,0.121,9,0.245,10,0.978,12,0.667,14,0.866,15,0.66,18,0.022,21,0.484,22,1.737,23,0.576,32,0.169,51,0.01,52,0.014,53,0.01,78,0.518,79,0.484,80,0.328,81,0.518,86,0.484,103,0.338,105,0.948,107,2.12,109,0.846,110,1.338,115,1.003,117,1.462,120,0.948,121,1.003,122,1.639,124,1.338,125,0.948,132,1.19,134,1.957,143,1.341,144,1.42,149,0.798,153,1.462,172,1.19,199,1.61,206,0.895,219,1.737,223,1.843,295,2.353,328,1.61,338,1.721,340,1.721,430,2.967,434,1.845,467,2.712,475,3.242,476,3.375,482,1.987,487,1.234,507,1.42,509,2.353,511,1.845,513,2.353,514,2.938,519,1.957,520,1.988,522,2.938,525,2.218,526,1.61,537,2.738,540,2.542,548,2.154,552,1.61,586,2.353,593,2.938,595,2.938,660,3.996,664,2.353,667,2.353,669,2.353,670,1.988,678,2.603,679,2.603,680,3.586,681,2.154,682,1.845,691,4.102,692,2.154,693,2.967,699,2.938,706,2.353,707,2.938,960,2.603,961,3.445,962,4.746,963,3.445,964,3.586,965,3.394,966,3.445,967,3.445,968,3.445,969,3.445]],["title/injectables/UserIdMiddleware.html",[103,0.251,970,2.407]],["body/injectables/UserIdMiddleware.html",[0,0.213,3,0.185,4,0.159,5,0.133,7,1.234,9,0.27,10,1.042,12,0.71,14,1.04,15,0.692,18,0.022,21,0.531,23,0.58,32,0.185,48,2.584,51,0.011,52,0.015,53,0.011,78,0.569,79,0.531,80,0.361,81,0.569,86,0.531,103,0.36,105,1.041,107,1.858,109,1.398,110,1.963,112,4.312,113,3.257,114,3.166,115,1.659,117,1.755,118,2.365,119,2.526,120,1.041,121,1.102,122,1.747,123,2.859,124,1.469,125,1.041,130,1.89,132,1.307,140,2.584,143,1.33,144,1.56,145,2.365,149,1.32,150,3.162,152,2.859,153,1.166,156,3.226,219,2.226,336,2.027,467,2.846,482,1.385,507,1.56,519,2.085,525,1.769,526,1.769,970,3.454,971,3.226,972,5.058,973,3.784,974,2.584,975,3.226,976,3.226,977,3.784,978,3.784,979,3.784,980,3.784,981,3.784,982,3.784,983,3.784,984,3.226,985,3.784,986,3.784,987,3.784,988,3.784]],["title/injectables/UserService.html",[103,0.251,989,2.033]],["body/injectables/UserService.html",[0,0.159,3,0.139,4,0.119,5,0.188,9,0.202,10,0.852,12,0.581,14,0.517,15,0.78,18,0.023,21,0.836,23,0.559,32,0.139,51,0.009,52,0.012,53,0.009,78,0.924,79,0.863,80,0.394,81,0.924,86,0.398,103,0.294,105,0.78,107,2.003,109,1.711,117,1.892,120,0.78,121,0.825,122,1.427,124,1.1,125,0.78,132,0.979,143,1.246,144,1.169,145,1.772,149,1.379,153,1.652,206,0.737,219,1.962,308,3.331,310,2.417,318,3.331,327,1.518,329,1.936,330,2.417,331,1.936,332,2.417,336,1.518,337,2.417,370,4.063,467,2.847,482,1.962,507,1.169,519,1.704,525,1.325,526,1.325,531,2.583,542,2.384,546,2.064,641,4.57,665,3.331,706,1.936,722,2.823,965,3.049,975,2.417,976,2.417,989,2.384,990,2.417,991,3.524,992,3.524,993,3.524,994,4.133,995,4.133,996,4.133,997,4.133,998,2.835,999,4.133,1000,2.835,1001,2.835,1002,4.133,1003,2.835,1004,2.417,1005,2.835,1006,4.133,1007,2.835,1008,4.133,1009,2.835,1010,4.133,1011,2.835,1012,2.835,1013,2.835,1014,2.835,1015,2.835,1016,2.835,1017,2.835,1018,2.835,1019,2.835,1020,2.835,1021,2.835,1022,2.835,1023,2.835,1024,5.36]],["title/controllers/UsersController.html",[157,1.761,1025,2.407]],["body/controllers/UsersController.html",[0,0.144,3,0.125,4,0.107,5,0.179,9,0.182,12,0.538,15,0.697,17,3.583,18,0.022,21,0.805,23,0.499,32,0.125,51,0.008,52,0.012,53,0.008,54,0.936,78,0.862,79,0.805,81,0.862,86,0.359,90,1.598,100,1.277,109,1.686,121,0.744,134,2.102,135,1.369,137,2.459,143,1.004,149,1.328,153,1.682,157,2.293,160,1.932,170,5.088,172,2.326,188,1.746,189,3.914,191,3.469,192,2.18,193,1.932,196,3.469,197,1.475,198,1.932,199,2.777,200,1.932,204,2.18,206,0.665,208,3.525,209,2.18,210,3.265,211,1.932,212,2.18,213,2.18,214,2.18,215,3.265,216,1.598,217,5.066,219,2.499,220,4.655,225,2.18,236,1.932,300,3.469,405,1.598,456,2.18,552,1.195,917,2.893,989,2.649,991,3.265,992,3.265,993,3.265,1004,2.18,1025,2.616,1026,2.18,1027,3.829,1028,3.829,1029,2.557,1030,2.557,1031,5.731,1032,2.557,1033,2.557,1034,2.557,1035,2.557,1036,2.557,1037,2.557,1038,2.557,1039,2.557,1040,2.557,1041,2.557,1042,2.557,1043,2.557,1044,2.557,1045,2.557,1046,2.557,1047,2.557,1048,2.557,1049,2.557,1050,2.557,1051,2.557,1052,2.18,1053,2.18,1054,2.893,1055,2.557,1056,2.557,1057,4.591,1058,2.557,1059,2.557,1060,2.557,1061,2.557,1062,2.557,1063,2.557,1064,2.557,1065,2.557,1066,2.557,1067,2.557,1068,2.557,1069,3.829,1070,2.557,1071,2.557,1072,3.829,1073,2.557,1074,2.557,1075,2.557,1076,2.557,1077,2.557,1078,2.557,1079,2.557,1080,2.557,1081,2.557,1082,2.557]],["title/modules/UsersModule.html",[54,1.29,68,2.033]],["body/modules/UsersModule.html",[0,0.216,3,0.188,4,0.161,5,0.135,7,1.251,12,0.717,14,0.7,15,0.466,18,0.022,21,0.539,22,1.404,23,0.57,32,0.188,51,0.012,52,0.015,53,0.012,54,2.238,56,1.916,57,2.054,58,2.397,59,2.397,60,2.054,61,3.309,62,2.944,67,3.506,68,3.915,69,3.19,70,2.212,71,2.397,73,3.486,74,2.619,75,3.486,76,4.176,78,0.577,79,0.539,80,0.365,81,0.577,82,3.486,84,3.486,85,2.619,86,0.539,90,2.397,100,2.549,102,2.897,134,1.581,135,2.054,280,3.486,287,3.27,292,2.897,294,2.897,295,2.619,299,3.27,300,3.856,301,3.27,302,3.27,303,2.897,304,2.897,305,3.27,306,3.27,450,2.619,970,2.619,989,3.777,1025,3.917,1053,3.27,1083,3.27,1084,3.835,1085,3.27,1086,3.835,1087,3.835,1088,3.835,1089,4.333,1090,3.835,1091,3.835,1092,3.835,1093,3.835,1094,3.835]],["title/injectables/Verifier.html",[103,0.251,448,2.203]],["body/injectables/Verifier.html",[0,0.232,3,0.202,4,0.173,5,0.145,7,1.345,9,0.294,12,0.752,14,1.085,15,0.651,18,0.022,21,0.579,23,0.581,32,0.202,51,0.012,52,0.016,53,0.012,78,0.62,79,0.579,80,0.393,81,0.62,86,0.579,103,0.381,105,1.135,109,1.459,110,2.078,113,3.369,114,3.142,115,1.73,117,1.938,118,2.578,119,2.674,120,1.135,121,1.201,122,1.849,125,1.135,130,2.06,132,1.425,143,1.17,144,1.7,149,0.956,150,2.578,153,1.271,172,1.425,219,1.959,448,3.346,482,1.51,507,1.7,511,2.209,519,2.207,520,2.379,525,1.928,526,1.928,538,2.209,587,3.183,682,2.209,692,2.578,889,3.088,974,2.817,1095,3.516,1096,4.124,1097,4.124,1098,4.124,1099,4.124]],["title/injectables/articleValidatorMiddleware.html",[103,0.251,288,2.407]],["body/injectables/articleValidatorMiddleware.html",[0,0.221,3,0.192,4,0.165,5,0.138,7,1.28,9,0.279,12,0.728,14,1.059,15,0.63,18,0.022,21,0.551,23,0.585,32,0.192,51,0.016,52,0.016,53,0.012,78,0.59,79,0.551,80,0.374,81,0.59,86,0.551,103,0.369,105,1.079,109,1.424,110,2.011,113,2.102,114,3.082,115,1.689,117,1.209,119,2.588,120,1.079,121,1.142,122,1.355,123,2.965,125,1.079,126,2.264,128,3.239,130,1.96,131,2.453,132,1.355,133,2.588,134,2.136,135,2.102,136,2.965,137,2.102,138,2.68,139,2.965,140,2.68,141,2.102,142,2.68,143,1.268,149,0.909,150,2.453,172,1.355,260,3.239,288,3.539,487,1.02,587,3.107,859,2.68,889,2.989,974,2.68,1100,4.946,1101,2.965,1102,3.924,1103,3.924,1104,2.965,1105,3.924,1106,3.924,1107,3.345,1108,3.345,1109,3.345,1110,3.345,1111,3.345,1112,3.345,1113,3.345]],["title/injectables/bodyValidatorMiddleware.html",[103,0.251,446,2.407]],["body/injectables/bodyValidatorMiddleware.html",[0,0.229,3,0.2,4,0.171,5,0.143,7,1.329,9,0.29,12,0.746,14,1.078,15,0.645,18,0.022,21,0.572,23,0.514,32,0.2,51,0.016,52,0.016,53,0.012,78,0.613,79,0.572,80,0.388,81,0.613,86,0.572,103,0.378,105,1.121,109,1.45,110,2.062,114,3.127,115,1.72,119,2.653,133,2.653,134,2.19,135,3.165,136,3.079,137,2.182,138,2.783,139,3.079,140,2.783,141,2.182,142,2.783,143,1.292,149,0.944,150,2.547,172,1.407,258,3.079,260,3.32,318,2.783,446,3.628,487,1.059,587,3.165,859,2.783,889,3.064,974,2.783,1101,3.079,1104,3.079,1107,3.474,1108,3.474,1109,3.474,1110,3.474,1111,3.474,1112,3.474,1113,3.474,1114,5.038,1115,4.075,1116,4.075,1117,4.013,1118,4.075,1119,4.075,1120,3.474,1121,4.075,1122,4.075]],["title/coverage.html",[1123,3.642]],["body/coverage.html",[0,0.278,1,1.405,5,0.072,6,1.754,18,0.022,51,0.006,52,0.01,53,0.006,60,1.102,80,0.196,94,1.405,96,1.405,98,1.405,103,0.469,104,1.405,106,1.754,115,1.747,126,1.187,128,2.025,130,1.028,131,1.286,141,3.819,152,1.554,157,2.002,158,1.405,159,1.754,194,1.187,197,1.187,199,0.962,201,1.286,223,0.799,243,1.754,283,1.554,288,1.405,307,1.754,327,1.102,328,0.962,329,1.405,331,1.405,333,1.405,353,1.405,354,1.754,400,1.102,402,1.286,426,1.286,427,1.286,428,1.286,429,1.286,430,1.286,443,1.554,446,1.405,448,1.286,465,1.754,474,1.187,475,1.405,476,1.187,477,1.405,478,1.187,482,0.753,507,0.848,508,1.405,509,1.405,510,1.405,516,1.405,517,1.405,519,0.848,635,1.554,637,1.554,638,1.754,643,2.313,644,1.754,659,2.448,663,1.554,714,2.448,715,2.448,721,1.554,734,1.524,736,1.754,743,1.286,744,3.589,747,1.286,766,1.405,776,1.405,782,1.405,802,1.405,817,1.754,818,2.738,823,1.754,826,1.405,827,1.754,828,1.754,832,1.754,833,1.754,835,1.754,841,1.554,842,1.754,843,1.754,858,1.754,878,1.754,888,1.754,892,1.554,895,1.554,903,1.405,904,1.754,922,1.554,923,1.754,924,1.754,939,1.754,943,1.554,944,1.554,949,1.754,960,2.448,964,1.554,970,1.405,971,1.754,989,1.187,990,1.754,1025,1.405,1026,1.754,1054,1.554,1089,1.554,1095,1.754,1100,1.754,1101,2.448,1114,1.754,1117,1.554,1123,1.554,1124,2.057,1125,2.057,1126,6.241,1127,6.001,1128,4.009,1129,1.754,1130,7.047,1131,2.763,1132,2.763,1133,5.56,1134,6.522,1135,1.754,1136,4.218,1137,1.754,1138,5.499,1139,2.057,1140,2.057,1141,2.057,1142,2.057,1143,3.418,1144,1.754,1145,2.763,1146,1.754,1147,1.754,1148,2.448,1149,4.947,1150,1.754,1151,3.24,1152,2.057,1153,2.057,1154,1.754,1155,1.754,1156,2.057,1157,1.754,1158,2.057,1159,1.754,1160,3.418,1161,1.754,1162,1.754,1163,1.754,1164,2.057,1165,2.057,1166,1.754,1167,1.754,1168,3.029,1169,1.554,1170,1.754,1171,1.754,1172,5.217,1173,1.754,1174,1.754,1175,1.754,1176,2.057,1177,2.763,1178,1.754,1179,2.057,1180,2.057]],["title/dependencies.html",[57,2.272,1181,2.938]],["body/dependencies.html",[0,0.284,11,2.355,18,0.023,27,2.846,29,2.573,51,0.011,52,0.015,53,0.011,57,2.018,86,0.529,117,1.161,121,1.097,125,1.036,253,2.846,336,2.018,399,2.846,434,3.488,546,2.519,552,2.657,652,3.212,665,2.573,720,3.212,722,2.573,723,2.846,809,2.573,849,4.299,868,4.299,891,2.573,912,3.212,965,2.355,1052,4.299,1104,2.846,1120,3.212,1182,3.767,1183,3.767,1184,6.328,1185,3.767,1186,5.043,1187,3.767,1188,3.767,1189,3.767,1190,3.767,1191,3.767,1192,3.767,1193,3.767,1194,3.767,1195,3.767,1196,3.767,1197,5.043,1198,3.767,1199,5.684,1200,5.043,1201,5.043,1202,3.767,1203,3.767,1204,3.767,1205,3.767,1206,3.767,1207,3.767,1208,3.767,1209,3.767,1210,3.767,1211,3.767,1212,3.767,1213,3.767,1214,3.767,1215,3.767,1216,3.767,1217,3.767,1218,3.767,1219,3.767,1220,3.767,1221,3.767,1222,3.767,1223,3.767,1224,3.767,1225,3.767,1226,3.767,1227,3.767,1228,3.767,1229,3.767,1230,3.767,1231,3.767,1232,3.767,1233,3.767,1234,3.767,1235,3.767,1236,3.767,1237,3.767,1238,3.767,1239,3.767,1240,3.767,1241,3.767,1242,3.767]],["title/miscellaneous/functions.html",[1243,2.007,1244,3.617]],["body/miscellaneous/functions.html",[5,0.189,9,0.296,18,0.021,51,0.013,52,0.016,53,0.013,60,3.194,78,1.038,79,0.97,81,1.038,115,1.21,137,2.225,216,2.597,260,2.597,266,3.542,294,3.139,295,2.838,329,3.674,333,3.674,466,2.597,540,2.225,573,4.506,586,3.674,619,2.597,766,3.674,840,4.064,892,4.064,943,4.064,944,4.064,1131,3.542,1132,5.085,1135,4.586,1136,3.542,1137,5.085,1148,3.139,1168,3.139,1169,4.064,1178,3.542,1243,2.838,1244,3.542,1245,3.542,1246,4.155,1247,6.533,1248,5.379,1249,3.542,1250,4.155,1251,4.155,1252,4.155,1253,4.155,1254,4.155,1255,4.155,1256,4.155,1257,4.155,1258,4.155,1259,4.155,1260,4.155,1261,4.155,1262,4.155,1263,4.155,1264,4.155,1265,3.542,1266,4.155,1267,4.155]],["title/index.html",[9,0.209,1268,2.938,1269,2.938]],["body/index.html",[4,0.179,11,2.662,18,0.022,51,0.013,52,0.017,53,0.013,83,5.428,208,2.457,304,5.09,761,2.909,762,2.909,965,2.662,1123,3.218,1270,4.259,1271,4.259,1272,5.465,1273,4.259,1274,4.259,1275,4.259,1276,4.259,1277,4.259,1278,4.259,1279,4.259,1280,4.259,1281,4.259,1282,4.259,1283,4.259,1284,4.259,1285,6.035,1286,6.851,1287,4.259,1288,4.259,1289,4.259,1290,4.259,1291,4.259,1292,5.465,1293,4.259,1294,4.259,1295,6.035,1296,4.259,1297,5.465,1298,4.259,1299,4.259,1300,4.259,1301,4.66,1302,5.465,1303,5.465,1304,4.259,1305,4.259,1306,4.259,1307,4.259,1308,4.259,1309,4.259,1310,4.259,1311,4.259,1312,4.259,1313,3.631,1314,4.259,1315,4.259,1316,4.259,1317,4.259,1318,4.259,1319,4.259,1320,4.259,1321,4.259,1322,4.259,1323,4.259,1324,4.259,1325,4.259,1326,4.259,1327,4.259,1328,4.259]],["title/modules.html",[56,2.408]],["body/modules.html",[18,0.019,51,0.016,52,0.019,53,0.016,55,3.618,56,2.646,65,3.311,66,3.311,67,2.837,68,3.056,1301,5.857,1329,6.87,1330,6.87,1331,7.009,1332,5.297,1333,5.297]],["title/overview.html",[1334,4.11]],["body/overview.html",[2,2.368,18,0.022,48,2.803,51,0.012,52,0.016,53,0.012,54,1.502,55,4.796,56,2.05,57,2.198,58,2.566,59,2.566,60,2.198,61,2.368,62,2.368,63,3.499,64,3.499,65,4.246,66,4.537,67,3.486,68,3.973,69,3.336,70,2.368,71,2.566,100,2.05,105,1.129,194,3.421,276,3.499,278,3.499,400,3.176,423,3.499,425,3.499,426,3.707,427,3.707,428,3.707,429,3.707,430,3.707,735,1.8,903,2.803,989,3.421,1083,3.499,1085,3.499,1334,3.499,1335,5.336,1336,3.499,1337,4.104,1338,3.499]],["title/miscellaneous/variables.html",[937,3.205,1243,2.007]],["body/miscellaneous/variables.html",[0,0.078,9,0.217,18,0.022,33,2.082,37,0.946,41,0.946,51,0.004,52,0.007,53,0.004,70,0.799,79,0.329,80,0.662,109,0.34,120,0.645,122,0.81,124,1.392,125,0.381,128,2.507,130,1.171,131,1.905,133,1.791,137,0.742,138,0.946,141,1.921,149,0.831,153,0.427,170,1.771,199,1.875,211,1.046,216,4.261,219,1.698,223,1.894,236,3.505,269,0.946,270,0.946,283,1.771,303,1.046,308,1.601,327,1.256,328,1.875,331,1.601,338,0.692,340,0.692,341,0.866,443,1.771,450,0.946,457,0.946,466,1.465,474,0.799,475,2.082,476,0.799,477,2.082,478,0.799,487,1.669,507,1.257,508,2.082,509,2.082,510,2.082,516,1.601,517,1.601,519,1.257,531,2.507,533,1.465,535,1.465,537,0.799,538,1.921,540,2.332,542,3.032,545,1.465,546,1.171,547,0.866,548,0.866,549,1.046,552,2.035,581,1.771,592,1.046,594,1.046,611,1.601,613,1.601,616,1.046,620,1.046,635,1.771,643,2.069,659,1.046,663,1.771,664,2.082,665,0.946,670,3.121,700,0.946,703,1.181,714,1.046,715,1.771,721,1.771,722,0.946,723,1.046,740,1.771,741,2.598,742,3.29,743,0.866,744,0.946,745,3.03,747,0.866,756,1.046,757,1.046,759,1.046,761,1.601,762,1.601,768,2.303,776,2.739,777,1.771,778,1.771,779,1.771,781,1.771,782,2.739,783,1.771,784,1.771,785,1.771,786,1.771,787,1.771,788,1.046,789,1.771,790,1.046,791,1.046,792,1.046,793,1.046,794,1.046,795,1.046,796,1.046,797,1.046,798,1.046,799,1.046,800,1.046,801,1.046,802,1.601,803,1.771,804,1.771,805,1.046,806,1.046,807,1.046,808,1.046,809,0.946,810,1.771,811,1.771,812,1.046,813,1.046,814,1.046,815,1.046,816,1.046,819,2.082,820,2.082,821,2.082,822,1.181,824,1.181,825,1.181,834,1.181,836,1.181,837,1.181,838,1.181,839,1.181,840,3.03,859,0.946,895,1.771,896,1.181,931,5.909,937,1.046,960,1.046,964,1.771,965,0.866,984,1.181,1054,1.771,1089,1.771,1117,1.771,1126,1.181,1129,1.181,1133,1.181,1143,1.181,1144,3.42,1145,1.181,1146,2.598,1147,1.181,1148,1.046,1150,1.181,1154,1.181,1155,1.181,1157,1.181,1159,1.181,1160,3.713,1161,2.598,1162,1.181,1163,1.181,1166,1.181,1167,1.999,1168,1.046,1169,1.046,1170,1.999,1171,1.181,1172,1.181,1173,1.999,1174,1.999,1175,1.999,1177,1.181,1243,0.946,1245,1.181,1249,1.999,1265,1.999,1313,2.598,1336,1.181,1338,1.181,1339,5.409,1340,1.385,1341,1.385,1342,1.385,1343,1.385,1344,1.385,1345,3.586,1346,2.344,1347,3.048,1348,1.385,1349,1.385,1350,2.344,1351,2.344,1352,1.385,1353,1.385,1354,1.385,1355,1.385,1356,1.385,1357,1.385,1358,1.385,1359,1.385,1360,1.385,1361,1.385,1362,2.344,1363,2.344,1364,1.385,1365,1.385,1366,1.385,1367,1.385,1368,1.385,1369,1.385,1370,1.385,1371,1.385,1372,1.385,1373,3.048,1374,1.385,1375,2.344,1376,4.011,1377,4.878,1378,2.344,1379,1.385,1380,1.385,1381,5.081,1382,1.385,1383,1.385,1384,1.385,1385,1.385,1386,1.385,1387,1.385,1388,3.048,1389,1.385,1390,1.385,1391,1.385,1392,1.385,1393,1.385,1394,1.385,1395,1.385,1396,1.385,1397,1.385,1398,1.385,1399,1.385,1400,1.385,1401,1.385,1402,1.385,1403,1.385,1404,1.385,1405,1.385,1406,1.385,1407,1.385,1408,1.385,1409,2.344,1410,1.385,1411,1.385,1412,1.385,1413,1.385,1414,1.385,1415,1.385,1416,2.344,1417,1.385,1418,1.385,1419,1.385,1420,1.385,1421,1.385,1422,1.385,1423,1.385,1424,1.385,1425,1.385,1426,1.385,1427,1.385,1428,1.385,1429,1.385,1430,1.385,1431,1.385,1432,1.385,1433,1.385,1434,1.385,1435,1.385,1436,1.385,1437,1.385,1438,1.385,1439,1.385,1440,1.385,1441,3.048,1442,1.385,1443,1.385,1444,1.385,1445,1.385,1446,1.385,1447,1.385,1448,1.385,1449,1.385,1450,2.344,1451,1.385,1452,1.385,1453,2.344,1454,1.385,1455,1.385,1456,1.385,1457,1.385,1458,1.385,1459,1.385,1460,2.344,1461,1.385,1462,1.385,1463,1.385,1464,1.385,1465,1.385,1466,1.385,1467,1.385,1468,1.385,1469,1.385,1470,1.385,1471,1.385,1472,1.385,1473,1.385,1474,1.385,1475,1.385,1476,1.385,1477,1.385]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/DoStuff.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1126,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.43",{"_index":1191,"title":{},"body":{"dependencies.html":{}}}],["0.1.12",{"_index":1233,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1214,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1226,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":1215,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1130,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1151,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1156,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1158,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":1165,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1128,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1138,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1127,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1176,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1149,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1164,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":48,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"injectables/UserIdMiddleware.html":{},"overview.html":{}}}],["1.0.0",{"_index":1200,"title":{},"body":{"dependencies.html":{}}}],["1.0.33",{"_index":1202,"title":{},"body":{"dependencies.html":{}}}],["1.0.5",{"_index":1222,"title":{},"body":{"dependencies.html":{}}}],["1.3.0",{"_index":1230,"title":{},"body":{"dependencies.html":{}}}],["1.4.1",{"_index":1189,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1134,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":1142,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1140,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1153,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1133,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["1337",{"_index":805,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["1338",{"_index":806,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["14.3.1",{"_index":1217,"title":{},"body":{"dependencies.html":{}}}],["14.3.2",{"_index":1193,"title":{},"body":{"dependencies.html":{}}}],["17",{"_index":1337,"title":{},"body":{"overview.html":{}}}],["2.1.0",{"_index":1228,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["2.4.2",{"_index":1212,"title":{},"body":{"dependencies.html":{}}}],["2.437.0",{"_index":1211,"title":{},"body":{"dependencies.html":{}}}],["2.48.1",{"_index":1204,"title":{},"body":{"dependencies.html":{}}}],["2.6.2",{"_index":1235,"title":{},"body":{"dependencies.html":{}}}],["2.7.6",{"_index":1198,"title":{},"body":{"dependencies.html":{}}}],["2.9.0",{"_index":1220,"title":{},"body":{"dependencies.html":{}}}],["25",{"_index":1152,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":1336,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["3.0.1",{"_index":1201,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":1227,"title":{},"body":{"dependencies.html":{}}}],["3.3.2",{"_index":1241,"title":{},"body":{"dependencies.html":{}}}],["3.4.4",{"_index":1206,"title":{},"body":{"dependencies.html":{}}}],["30000",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["33",{"_index":1139,"title":{},"body":{"coverage.html":{}}}],["342352192956",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1229,"title":{},"body":{"dependencies.html":{}}}],["4.5.4",{"_index":1183,"title":{},"body":{"dependencies.html":{}}}],["448307408974851",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["48h",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["4bef83a9a03d5c81445896dbc623b01d",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":1335,"title":{},"body":{"overview.html":{}}}],["5.3.25",{"_index":1195,"title":{},"body":{"dependencies.html":{}}}],["5.3.3",{"_index":1240,"title":{},"body":{"dependencies.html":{}}}],["5.5.0",{"_index":1218,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6.0.0",{"_index":1184,"title":{},"body":{"dependencies.html":{}}}],["6.0.1",{"_index":1208,"title":{},"body":{"dependencies.html":{}}}],["6.0.5",{"_index":1186,"title":{},"body":{"dependencies.html":{}}}],["6.1.0",{"_index":1224,"title":{},"body":{"dependencies.html":{}}}],["6.2.1",{"_index":1242,"title":{},"body":{"dependencies.html":{}}}],["6.3.3",{"_index":1236,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":1216,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1141,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1338,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["9_",{"_index":626,"title":{},"body":{"injectables/AuthService.html":{}}}],["_",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_id",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token",{"_index":577,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token_uri",{"_index":819,"title":{},"body":{"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/ITwitterConfig.html":{},"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":678,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["active",{"_index":836,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["additionalprovidersdata",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["aditional",{"_index":209,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["admin",{"_index":170,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["admin')@useinterceptors(undefined",{"_index":1047,"title":{},"body":{"controllers/UsersController.html":{}}}],["administrator",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["afterinit",{"_index":13,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["al",{"_index":36,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["allowedroutes",{"_index":977,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["allowedroutes.indexof(request.params.id",{"_index":980,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["already",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amazing",{"_index":1309,"title":{},"body":{"index.html":{}}}],["angular",{"_index":1280,"title":{},"body":{"index.html":{}}}],["anonymous",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["another",{"_index":305,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{}}}],["api",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/articles",{"_index":218,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["api/articles/:articleid",{"_index":230,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["api/users",{"_index":1057,"title":{},"body":{"controllers/UsersController.html":{}}}],["api/users/:id",{"_index":1069,"title":{},"body":{"controllers/UsersController.html":{}}}],["api/users/me",{"_index":1058,"title":{},"body":{"controllers/UsersController.html":{}}}],["api/users/upload",{"_index":1064,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1289,"title":{},"body":{"index.html":{}}}],["app.gateway",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["appgateway",{"_index":1,"title":{"classes/AppGateway.html":{}},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application/x",{"_index":582,"title":{},"body":{"injectables/AuthService.html":{}}}],["applications",{"_index":1277,"title":{},"body":{"index.html":{}}}],["apply(articlevalidatormiddleware",{"_index":293,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["apply(authenticate('facebook",{"_index":459,"title":{},"body":{"modules/AuthModule.html":{}}}],["apply(authenticate('google",{"_index":463,"title":{},"body":{"modules/AuthModule.html":{}}}],["apply(authenticate('local",{"_index":454,"title":{},"body":{"modules/AuthModule.html":{}}}],["apply(authenticate('twitter",{"_index":461,"title":{},"body":{"modules/AuthModule.html":{}}}],["apply(bodyvalidatormiddleware",{"_index":452,"title":{},"body":{"modules/AuthModule.html":{}}}],["apply(loggermiddleware",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["apply(useridmiddleware",{"_index":1093,"title":{},"body":{"modules/UsersModule.html":{}}}],["appmodule",{"_index":55,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["aqui",{"_index":565,"title":{},"body":{"injectables/AuthService.html":{}}}],["article",{"_index":133,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"injectables/ArticlesService.html":{},"interfaces/IArticle.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["article.content",{"_index":348,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["article.creator",{"_index":226,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["article.remove",{"_index":352,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["article.save",{"_index":350,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["article.title",{"_index":346,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["article.updateattributes(body",{"_index":351,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["article_model_token",{"_index":131,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/articleValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["articleidmiddleware",{"_index":104,"title":{"injectables/ArticleIdMiddleware.html":{}},"body":{"injectables/ArticleIdMiddleware.html":{},"modules/ArticlesModule.html":{},"coverage.html":{}}}],["articlemodel",{"_index":108,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{}}}],["articleproviders",{"_index":283,"title":{},"body":{"modules/ArticlesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["articles",{"_index":161,"title":{},"body":{"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{}}}],["articles.controller",{"_index":282,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["articles.gateway",{"_index":285,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["articles.providers",{"_index":284,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["articles.service",{"_index":195,"title":{},"body":{"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{}}}],["articles/:articleid",{"_index":298,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["articles/articles.gateway",{"_index":202,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["articles/interfaces/article.interface",{"_index":1106,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{}}}],["articles/joi/article.joi",{"_index":1105,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{}}}],["articles/middlewares/article",{"_index":289,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["articleschema",{"_index":128,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/articleValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["articlescontroller",{"_index":158,"title":{"controllers/ArticlesController.html":{}},"body":{"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{},"coverage.html":{}}}],["articlesgateway",{"_index":201,"title":{"classes/ArticlesGateway.html":{}},"body":{"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"coverage.html":{}}}],["articlesmodule",{"_index":65,"title":{"modules/ArticlesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules.html":{},"overview.html":{}}}],["articlesservice",{"_index":194,"title":{"injectables/ArticlesService.html":{}},"body":{"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"coverage.html":{},"overview.html":{}}}],["articlessocket",{"_index":207,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["articlevalidatormiddleware",{"_index":288,"title":{"injectables/articleValidatorMiddleware.html":{}},"body":{"modules/ArticlesModule.html":{},"injectables/articleValidatorMiddleware.html":{},"coverage.html":{}}}],["asignamos",{"_index":795,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":109,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":445,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.providers",{"_index":444,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["authcontroller",{"_index":353,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":433,"title":{},"body":{"modules/AuthModule.html":{}}}],["authenticated",{"_index":1060,"title":{},"body":{"controllers/UsersController.html":{}}}],["authguard",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":66,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1319,"title":{},"body":{"index.html":{}}}],["authorization_code",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authproviders",{"_index":443,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authservice",{"_index":400,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authuserschema",{"_index":1117,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["autoreconnect",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["available",{"_index":1333,"title":{},"body":{"modules.html":{}}}],["await",{"_index":153,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":1209,"title":{},"body":{"dependencies.html":{}}}],["awskey",{"_index":786,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["awssecret",{"_index":787,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":1310,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":974,"title":{},"body":{"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["badrequestexception(`validation",{"_index":1112,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["based",{"_index":1059,"title":{},"body":{"controllers/UsersController.html":{}}}],["bash",{"_index":1285,"title":{},"body":{"index.html":{}}}],["bearer",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["before",{"_index":303,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["begin",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["behaviorsubject",{"_index":936,"title":{},"body":{"injectables/SharedVariables.html":{}}}],["behaviorsubject(0",{"_index":934,"title":{},"body":{"injectables/SharedVariables.html":{}}}],["blank",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["body",{"_index":318,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["body.content",{"_index":349,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["body.error",{"_index":575,"title":{},"body":{"injectables/AuthService.html":{}}}],["body.title",{"_index":347,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["bodyvalidatormiddleware",{"_index":446,"title":{"injectables/bodyValidatorMiddleware.html":{}},"body":{"modules/AuthModule.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{}}}],["boolean",{"_index":620,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1331,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1329,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1273,"title":{},"body":{"index.html":{}}}],["cada",{"_index":34,"title":{},"body":{"classes/AppGateway.html":{}}}],["callback",{"_index":596,"title":{},"body":{"injectables/AuthService.html":{}}}],["called",{"_index":642,"title":{},"body":{"classes/DoStuff.html":{},"guards/RolesGuard.html":{}}}],["calling",{"_index":301,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{}}}],["canactivate",{"_index":905,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":909,"title":{},"body":{"guards/RolesGuard.html":{}}}],["catch",{"_index":340,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/variables.html":{}}}],["chalk",{"_index":891,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"dependencies.html":{}}}],["chalk.default",{"_index":896,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"miscellaneous/variables.html":{}}}],["changecountervalue",{"_index":927,"title":{},"body":{"injectables/SharedVariables.html":{}}}],["changecountervalue(number",{"_index":929,"title":{},"body":{"injectables/SharedVariables.html":{}}}],["characters",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":0,"title":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"classes/DoStuff.html":{},"classes/EnvironmentService.html":{},"classes/IoConnector.html":{}},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/DoStuff.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"classes/DoStuff.html":{},"classes/EnvironmentService.html":{},"classes/IoConnector.html":{},"overview.html":{}}}],["client",{"_index":253,"title":{},"body":{"classes/ArticlesGateway.html":{},"classes/IoConnector.html":{},"dependencies.html":{}}}],["client_id",{"_index":611,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"miscellaneous/variables.html":{}}}],["client_id=${this.fbconfig.client_id",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{}}}],["client_id=${this.googleconfig.client_id",{"_index":605,"title":{},"body":{"injectables/AuthService.html":{}}}],["client_secret",{"_index":613,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"miscellaneous/variables.html":{}}}],["client_secret=${this.fbconfig.client_secret",{"_index":566,"title":{},"body":{"injectables/AuthService.html":{}}}],["clientid",{"_index":671,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["clientsecret",{"_index":673,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["cluster_appmodule",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_articlesmodule",{"_index":276,"title":{},"body":{"modules/ArticlesModule.html":{},"overview.html":{}}}],["cluster_articlesmodule_imports",{"_index":277,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["cluster_articlesmodule_providers",{"_index":278,"title":{},"body":{"modules/ArticlesModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":423,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":424,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":425,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1083,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1084,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1085,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":450,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["code=${code",{"_index":567,"title":{},"body":{"injectables/AuthService.html":{}}}],["common/helpers/converters",{"_index":332,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/UserService.html":{}}}],["common/helpers/error",{"_index":334,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{}}}],["common/helpers/utils",{"_index":330,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/UserService.html":{}}}],["common/middlewares/logger.middleware",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middlewares/tenant.middleware",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["common/middlewares/token.middleware",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["communication",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["con",{"_index":753,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["conditional",{"_index":688,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["conexión",{"_index":35,"title":{},"body":{"classes/AppGateway.html":{}}}],["config",{"_index":802,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config.interface",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["config.interface.ts",{"_index":818,"title":{},"body":{"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/ITwitterConfig.html":{},"coverage.html":{}}}],["config.ts",{"_index":1160,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["config/multer",{"_index":1055,"title":{},"body":{"controllers/UsersController.html":{}}}],["config[env",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configuration",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configure",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["connected",{"_index":50,"title":{},"body":{"classes/AppGateway.html":{}}}],["connection",{"_index":124,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["connection.model('article",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection.model('user",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connector/io.ts",{"_index":843,"title":{},"body":{"classes/IoConnector.html":{},"coverage.html":{}}}],["connector/io.ts:4",{"_index":846,"title":{},"body":{"classes/IoConnector.html":{}}}],["connector/io.ts:8",{"_index":847,"title":{},"body":{"classes/IoConnector.html":{}}}],["consecutive",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('articles",{"_index":291,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["console.log('auth",{"_index":451,"title":{},"body":{"modules/AuthModule.html":{}}}],["console.log('connected",{"_index":852,"title":{},"body":{"classes/IoConnector.html":{}}}],["console.log('do",{"_index":640,"title":{},"body":{"classes/DoStuff.html":{}}}],["console.log('hi",{"_index":1121,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{}}}],["console.log('initializing",{"_index":258,"title":{},"body":{"classes/ArticlesGateway.html":{},"classes/IoConnector.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["console.log('llego",{"_index":564,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('message",{"_index":854,"title":{},"body":{"classes/IoConnector.html":{}}}],["console.log('roles",{"_index":913,"title":{},"body":{"guards/RolesGuard.html":{}}}],["console.log('user",{"_index":49,"title":{},"body":{"classes/AppGateway.html":{}}}],["console.log('users",{"_index":1092,"title":{},"body":{"modules/UsersModule.html":{}}}],["console.log(`[${log[methodcolor](req.method",{"_index":901,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log(`connecting",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(database",{"_index":947,"title":{},"body":{"injectables/TenantMiddleware.html":{}}}],["console.log(ex",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log(messages",{"_index":856,"title":{},"body":{"classes/IoConnector.html":{}}}],["console.log(methodcolor",{"_index":899,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["console.log(url",{"_index":1469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":143,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["constante",{"_index":794,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":14,"title":{},"body":{"classes/AppGateway.html":{},"injectables/ArticleIdMiddleware.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/DoStuff.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["constructor(@inject(articlesservice",{"_index":205,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["constructor(@inject(db_connection_token",{"_index":945,"title":{},"body":{"injectables/TenantMiddleware.html":{}}}],["constructor(@inject(facebook_config_token",{"_index":666,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["constructor(@inject(google_config_token",{"_index":724,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["constructor(@inject(request",{"_index":337,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":860,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(connection",{"_index":940,"title":{},"body":{"injectables/TenantMiddleware.html":{}}}],["constructor(fbconfig",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{}}}],["constructor(filepath",{"_index":646,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["constructor(googleconfig",{"_index":716,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["constructor(private",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":906,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(request",{"_index":310,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/UserService.html":{}}}],["constructor(twitterconfig",{"_index":961,"title":{},"body":{"injectables/TwitterStrategy.html":{}}}],["constructor(url",{"_index":845,"title":{},"body":{"classes/IoConnector.html":{}}}],["consumer",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(articleidmiddleware",{"_index":297,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["consumer_key",{"_index":592,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITwitterConfig.html":{},"miscellaneous/variables.html":{}}}],["consumer_secret",{"_index":594,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/ITwitterConfig.html":{},"miscellaneous/variables.html":{}}}],["consumerkey",{"_index":967,"title":{},"body":{"injectables/TwitterStrategy.html":{}}}],["consumersecret",{"_index":968,"title":{},"body":{"injectables/TwitterStrategy.html":{}}}],["contendr",{"_index":746,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["content",{"_index":581,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IArticle.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":912,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["context.gethandler",{"_index":915,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":916,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":157,"title":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('articles",{"_index":203,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["controller('auth",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":1056,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":1123,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["creada",{"_index":797,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["creamos",{"_index":265,"title":{},"body":{"classes/ArticlesGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["create",{"_index":162,"title":{},"body":{"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"injectables/GoogleStrategy.html":{}}}],["create(@req",{"_index":224,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["create(article",{"_index":312,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["create(req",{"_index":168,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["createconnection(`${server_config.db_uri",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["created",{"_index":740,"title":{},"body":{"interfaces/IArticle.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["createhmac('sha256",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtoken",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["createtoken(user",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuserandreturntoken",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuserandreturntoken(user",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["creating",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creator",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cual",{"_index":270,"title":{},"body":{"classes/ArticlesGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":215,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["currentcountervalue",{"_index":925,"title":{},"body":{"injectables/SharedVariables.html":{}}}],["data",{"_index":250,"title":{},"body":{"classes/ArticlesGateway.html":{},"injectables/GoogleStrategy.html":{}}}],["database",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"injectables/TenantMiddleware.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["database.providers",{"_index":636,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databasemodule",{"_index":67,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseproviders",{"_index":635,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":742,"title":{},"body":{"interfaces/IArticle.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":144,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{}}}],["db.model(article_model_token",{"_index":147,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{}}}],["db.model(user_model_token",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{}}}],["db_connection_token",{"_index":328,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["db_uri",{"_index":778,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["dbconnectiontoken",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbs",{"_index":777,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["de",{"_index":263,"title":{},"body":{"classes/ArticlesGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["declarated",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declaration",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declaring",{"_index":737,"title":{},"body":{"interfaces/IArticle.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"classes/AppGateway.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["decorators/roles.decorator",{"_index":200,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":931,"title":{},"body":{"injectables/SharedVariables.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":15,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/DoStuff.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IConfig.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["defines",{"_index":1259,"title":{},"body":{"miscellaneous/functions.html":{}}}],["definimos",{"_index":800,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["defining",{"_index":214,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["delete",{"_index":191,"title":{},"body":{"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"controllers/UsersController.html":{}}}],["delete(':articleid",{"_index":240,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["delete(':articleid')@roles('user",{"_index":174,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["delete(':id",{"_index":1079,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id')@roles('admin",{"_index":1030,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(article",{"_index":314,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["delete/update/read",{"_index":306,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{}}}],["deletearticle",{"_index":163,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["deletearticle(@req",{"_index":241,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["deletearticle(req",{"_index":173,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["deleteuser",{"_index":991,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["deleteuser(@req",{"_index":1081,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(req",{"_index":1029,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(user",{"_index":997,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":57,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desarrollo",{"_index":755,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["description",{"_index":208,"title":{},"body":{"controllers/ArticlesController.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["development",{"_index":761,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["displayname",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/variables.html":{}}}],["document",{"_index":739,"title":{},"body":{"interfaces/IArticle.html":{},"interfaces/IUser.html":{}}}],["documentation",{"_index":1124,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":689,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["domain",{"_index":783,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["done",{"_index":681,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["done(err",{"_index":707,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["done(error",{"_index":887,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["done(ex",{"_index":733,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["done(new",{"_index":877,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["done(null",{"_index":693,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["dostuff",{"_index":637,"title":{"classes/DoStuff.html":{}},"body":{"classes/DoStuff.html":{},"coverage.html":{}}}],["dotenv",{"_index":652,"title":{},"body":{"classes/EnvironmentService.html":{},"dependencies.html":{}}}],["dots",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dr6rht4d8neev4lsf11inalma1j86rrf.apps.googleusercontent.com",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dropped",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["e2e",{"_index":1298,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1274,"title":{},"body":{"index.html":{}}}],["ejecutar",{"_index":272,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["el",{"_index":269,"title":{},"body":{"classes/ArticlesGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["email",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"injectables/Verifier.html":{},"miscellaneous/variables.html":{}}}],["emails",{"_index":676,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["empty",{"_index":1261,"title":{},"body":{"miscellaneous/functions.html":{}}}],["en",{"_index":33,"title":{},"body":{"classes/AppGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["encuentra",{"_index":792,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enter",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entorno",{"_index":774,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["entornos",{"_index":754,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["enum",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["env",{"_index":1173,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["envconfig",{"_index":645,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["environment",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["environment.variables",{"_index":765,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["environmentservice",{"_index":643,"title":{"classes/EnvironmentService.html":{}},"body":{"classes/EnvironmentService.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environmentservice('.env",{"_index":768,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('aws_key",{"_index":810,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('aws_secret",{"_index":811,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('dbs",{"_index":804,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('domain",{"_index":814,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('http_protocol",{"_index":815,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('http_server_port",{"_index":812,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('ws_port",{"_index":813,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["environmentservice.get('ws_protocol",{"_index":816,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["envservice",{"_index":1174,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["envservice.get('node_env",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["err",{"_index":586,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/functions.html":{}}}],["error",{"_index":573,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/functions.html":{}}}],["errormessage",{"_index":1109,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["errormessage.replace(/[\"]/g",{"_index":1111,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["estos",{"_index":748,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["ex",{"_index":341,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/TokenMiddleware.html":{},"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":910,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exist",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existinguser",{"_index":691,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["exists",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exp",{"_index":829,"title":{},"body":{"interfaces/IJwtPayload.html":{}}}],["expiresin",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["explicación",{"_index":262,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["export",{"_index":32,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/DoStuff.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["exportation",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exports",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":121,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/DoStuff.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":738,"title":{},"body":{"interfaces/IArticle.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{}}}],["external",{"_index":855,"title":{},"body":{"classes/IoConnector.html":{}}}],["extract",{"_index":1251,"title":{},"body":{"miscellaneous/functions.html":{}}}],["extractjwt",{"_index":866,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":874,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractkey",{"_index":766,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["extractkey(`${rootpath}/keys/jwt.private.key",{"_index":799,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["extractkey(path",{"_index":1250,"title":{},"body":{"miscellaneous/functions.html":{}}}],["facebook",{"_index":665,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["facebook_config_token",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["facebookconfig",{"_index":1161,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["facebookconfigtoken",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["facebooksignin",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["facebooksignin(@req",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebooksignin(code",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["facebooksignin(req",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{}}}],["facebookstrategy",{"_index":426,"title":{"injectables/FacebookStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/FacebookStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["facebooktokenstrategy",{"_index":663,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["failed",{"_index":1113,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["false",{"_index":457,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["fbconfig",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{}}}],["fbstate",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["field",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/DoStuff.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["file.location",{"_index":1015,"title":{},"body":{"injectables/UserService.html":{}}}],["fileinterceptor",{"_index":1051,"title":{},"body":{"controllers/UsersController.html":{}}}],["filepath",{"_index":648,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["fill",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["findall",{"_index":244,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["findall(client",{"_index":249,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["findbyid",{"_index":302,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{}}}],["finduserbyid",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduserbyid(id",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["first",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firstname",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["form",{"_index":584,"title":{},"body":{"injectables/AuthService.html":{}}}],["forroutes",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/UsersModule.html":{}}}],["forroutes('auth/facebook/token",{"_index":460,"title":{},"body":{"modules/AuthModule.html":{}}}],["forroutes('auth/google/token",{"_index":464,"title":{},"body":{"modules/AuthModule.html":{}}}],["forroutes('auth/local/signin",{"_index":458,"title":{},"body":{"modules/AuthModule.html":{}}}],["forroutes('auth/local/signup",{"_index":453,"title":{},"body":{"modules/AuthModule.html":{}}}],["forroutes('auth/twitter/token",{"_index":462,"title":{},"body":{"modules/AuthModule.html":{}}}],["found",{"_index":140,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["framework",{"_index":1272,"title":{},"body":{"index.html":{}}}],["fs",{"_index":654,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["function",{"_index":115,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["function(socket",{"_index":45,"title":{},"body":{"classes/AppGateway.html":{}}}],["functions",{"_index":1244,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":627,"title":{},"body":{"injectables/AuthService.html":{}}}],["gateway",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["generatehashedpassword",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["generatehashedpassword(salt",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatehashedpassword(user.salt",{"_index":885,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["generatesalt",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["generateusername(profile",{"_index":708,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["generating",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generator",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get('')@roles('user",{"_index":180,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["get(':articleid",{"_index":231,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["get(':articleid')@roles('user",{"_index":177,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["get(':id",{"_index":1070,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id')@roles('user",{"_index":1034,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('facebook/uri",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/uri",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('me",{"_index":1061,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('me')@roles('user",{"_index":1040,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('twitter/uri",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@roles('user",{"_index":1037,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(key",{"_index":649,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["get(uri",{"_index":572,"title":{},"body":{"injectables/AuthService.html":{}}}],["getalloweddatabases",{"_index":1137,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getarticlebyid",{"_index":164,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["getarticlebyid(@req",{"_index":232,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["getarticlebyid(req",{"_index":176,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["getdatabasefromorigin",{"_index":944,"title":{},"body":{"injectables/TenantMiddleware.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getdatabasefromorigin(getorigin(req.headers.origin",{"_index":946,"title":{},"body":{"injectables/TenantMiddleware.html":{}}}],["getdatabasefromorigin(origin",{"_index":1254,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geterrormessage",{"_index":333,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["geterrormessage(err",{"_index":1262,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getmethodcolor",{"_index":892,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getmethodcolor(method",{"_index":1256,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getmethodcolor(req.method",{"_index":898,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["getorigin",{"_index":943,"title":{},"body":{"injectables/TenantMiddleware.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getorigin(url",{"_index":1257,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getting",{"_index":1268,"title":{"index.html":{}},"body":{}}],["getuniqueerrormessage",{"_index":1135,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getuniqueerrormessage(err",{"_index":1263,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getuserbyid",{"_index":992,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["getuserbyid(@req",{"_index":1071,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(req",{"_index":1033,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(userid",{"_index":999,"title":{},"body":{"injectables/UserService.html":{}}}],["getusers",{"_index":993,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["getusers(@req",{"_index":1076,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(query",{"_index":1002,"title":{},"body":{"injectables/UserService.html":{}}}],["getusers(req",{"_index":1036,"title":{},"body":{"controllers/UsersController.html":{}}}],["gkey5a5piukswtrdnjwqnycdz",{"_index":1471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["google",{"_index":722,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["google_config_token",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["googleconfig",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["googleconfigtoken",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlesignin",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["googlesignin(@req",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlesignin(code",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlesignin(req",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlestrategy",{"_index":427,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["googletokenstrategy",{"_index":721,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grant_type",{"_index":616,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IGoogleConfig.html":{},"miscellaneous/variables.html":{}}}],["graph",{"_index":1332,"title":{},"body":{"modules.html":{}}}],["graph.facebook.com",{"_index":701,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["grow",{"_index":1306,"title":{},"body":{"index.html":{}}}],["guard",{"_index":903,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["guardar",{"_index":40,"title":{},"body":{"classes/AppGateway.html":{}}}],["guards",{"_index":196,"title":{},"body":{"controllers/ArticlesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["guards/roles.guard",{"_index":198,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["handler",{"_index":335,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{}}}],["handler.ts",{"_index":1132,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["hashed",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hasrole",{"_index":918,"title":{},"body":{"guards/RolesGuard.html":{}}}],["headers",{"_index":580,"title":{},"body":{"injectables/AuthService.html":{}}}],["heavily",{"_index":1278,"title":{},"body":{"index.html":{}}}],["helpers/utils",{"_index":893,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/TenantMiddleware.html":{}}}],["here",{"_index":1316,"title":{},"body":{"index.html":{}}}],["http",{"_index":808,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:4200/index",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:4200/recipes",{"_index":1476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception",{"_index":324,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"classes/DoStuff.html":{},"classes/IoConnector.html":{}}}],["httpexception(geterrormessage(ex",{"_index":343,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{}}}],["httpport",{"_index":779,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["httpprotocol",{"_index":784,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["https://accounts.google.com/o/oauth2/auth",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://accounts.google.com/o/oauth2/token",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://api.twitter.com/oauth/access_token",{"_index":1475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://api.twitter.com/oauth/authenticate",{"_index":1474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://api.twitter.com/oauth/request_token",{"_index":1473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://graph.facebook.com/v2.12/oauth/access_token",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":1323,"title":{},"body":{"index.html":{}}}],["https://www.facebook.com/v2.12/dialog/oauth",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.googleapis.com/auth/plus.login",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.googleapis.com/auth/plus.profile.emails.read",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpstatus",{"_index":325,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"classes/DoStuff.html":{},"classes/IoConnector.html":{}}}],["httpstatus.unprocessable_entity",{"_index":344,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{}}}],["iarticle",{"_index":126,"title":{"interfaces/IArticle.html":{}},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"interfaces/IArticle.html":{},"injectables/articleValidatorMiddleware.html":{},"coverage.html":{}}}],["iat",{"_index":830,"title":{},"body":{"interfaces/IJwtPayload.html":{}}}],["iconfig",{"_index":743,"title":{"interfaces/IConfig.html":{}},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":134,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["identifier",{"_index":152,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"coverage.html":{}}}],["ienvironmentconfig",{"_index":747,"title":{"interfaces/IEnvironmentConfig.html":{}},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["if(!types.objectid.isvalid(request.params.articleid",{"_index":148,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{}}}],["if(!types.objectid.isvalid(request.params.id",{"_index":982,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["if(google",{"_index":1023,"title":{},"body":{"injectables/UserService.html":{}}}],["if(isallowedroute",{"_index":981,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["ifacebookconfig",{"_index":474,"title":{"interfaces/IFacebookConfig.html":{}},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"interfaces/IFacebookConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["igoogleconfig",{"_index":478,"title":{"interfaces/IGoogleConfig.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IGoogleConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ijwtpayload",{"_index":826,"title":{"interfaces/IJwtPayload.html":{}},"body":{"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["illegalusernames",{"_index":1170,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["im",{"_index":1122,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{}}}],["implementan",{"_index":751,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["implemente",{"_index":760,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["implements",{"_index":7,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["import",{"_index":23,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/DoStuff.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IUser.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["imports",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":727,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/AppGateway.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":763,"title":{},"body":{"interfaces/IConfig.html":{}}}],["indexed",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/DoStuff.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["information",{"_index":210,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["init",{"_index":660,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["inject",{"_index":120,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"classes/DoStuff.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/IoConnector.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["inject(facebook_config_token",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(google_config_token",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(request",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(twitter_config_token",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwitterStrategy.html":{}}}],["injectable",{"_index":103,"title":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"classes/DoStuff.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{}}}],["injectables",{"_index":105,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"overview.html":{}}}],["inspired",{"_index":1279,"title":{},"body":{"index.html":{}}}],["install",{"_index":1287,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1284,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":734,"title":{"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{}},"body":{"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"coverage.html":{}}}],["interfaces",{"_index":735,"title":{},"body":{"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"overview.html":{}}}],["interfaces/article.interface",{"_index":127,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{}}}],["interfaces/facebook",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{}}}],["interfaces/google",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["interfaces/jwt",{"_index":869,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["interfaces/token.interface",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["interfaces/twitter",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwitterStrategy.html":{}}}],["interfaces/user.interface",{"_index":975,"title":{},"body":{"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{}}}],["interfaz",{"_index":752,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["invalid",{"_index":984,"title":{},"body":{"injectables/UserIdMiddleware.html":{},"miscellaneous/variables.html":{}}}],["ioconnector",{"_index":841,"title":{"classes/IoConnector.html":{}},"body":{"classes/IoConnector.html":{},"coverage.html":{}}}],["isallowedroute",{"_index":979,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["isemptyobject",{"_index":329,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isemptyobject(value",{"_index":1258,"title":{},"body":{"miscellaneous/functions.html":{}}}],["itoken",{"_index":402,"title":{"interfaces/IToken.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IToken.html":{},"coverage.html":{}}}],["itwitterconfig",{"_index":476,"title":{"interfaces/ITwitterConfig.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/ITwitterConfig.html":{},"injectables/TwitterStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iuser",{"_index":482,"title":{"interfaces/IUser.html":{}},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"coverage.html":{}}}],["joi",{"_index":1104,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"dependencies.html":{}}}],["join",{"_index":1312,"title":{},"body":{"index.html":{}}}],["jos975affhqgslcr6",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.parse(body",{"_index":578,"title":{},"body":{"injectables/AuthService.html":{}}}],["jsonwebtoken",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TokenMiddleware.html":{}}}],["jwt",{"_index":868,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":873,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtsecret",{"_index":782,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtstrategy",{"_index":428,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1320,"title":{},"body":{"index.html":{}}}],["keepalive",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key",{"_index":619,"title":{},"body":{"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/functions.html":{}}}],["keys",{"_index":1253,"title":{},"body":{"miscellaneous/functions.html":{}}}],["keys/jwt.private.key",{"_index":798,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["la",{"_index":745,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["las",{"_index":771,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["last",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letters",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":1325,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1303,"title":{},"body":{"index.html":{}}}],["linea",{"_index":39,"title":{},"body":{"classes/AppGateway.html":{}}}],["list",{"_index":165,"title":{},"body":{"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{}}}],["list(@req",{"_index":221,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["list(req",{"_index":179,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["literal",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{},"classes/EnvironmentService.html":{}}}],["llamado",{"_index":268,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["llave",{"_index":796,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["loaded",{"_index":292,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["loader",{"_index":1239,"title":{},"body":{"dependencies.html":{}}}],["local",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"injectables/LocalStrategy.html":{},"injectables/SharedVariables.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["local.hashedpassword",{"_index":987,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["local.salt",{"_index":986,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["localhost",{"_index":807,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["localstrategy",{"_index":429,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":895,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["log.white(req.baseurl",{"_index":902,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["loggermiddleware",{"_index":94,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["login_dialog_uri",{"_index":820,"title":{},"body":{"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/ITwitterConfig.html":{},"miscellaneous/variables.html":{}}}],["logmessage",{"_index":894,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["long",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["los",{"_index":41,"title":{},"body":{"classes/AppGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["lowercase",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["map",{"_index":30,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["match",{"_index":629,"title":{},"body":{"injectables/AuthService.html":{}}}],["match.shift",{"_index":632,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":52,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/DoStuff.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["me(@req",{"_index":1062,"title":{},"body":{"controllers/UsersController.html":{}}}],["me(req",{"_index":1039,"title":{},"body":{"controllers/UsersController.html":{}}}],["me(usermodel",{"_index":1006,"title":{},"body":{"injectables/UserService.html":{}}}],["meanjs",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":260,"title":{},"body":{"classes/ArticlesGateway.html":{},"classes/IoConnector.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/functions.html":{}}}],["messages",{"_index":130,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"classes/IoConnector.html":{},"injectables/LocalStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1232,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":295,"title":{},"body":{"modules/ArticlesModule.html":{},"injectables/TwitterStrategy.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["methodcolor",{"_index":897,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["methods",{"_index":12,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["middleware",{"_index":135,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["middlewareconsumer",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["middlewares",{"_index":287,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{}}}],["middlewares/articlebyid.middleware",{"_index":286,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["middlewares/body",{"_index":447,"title":{},"body":{"modules/AuthModule.html":{}}}],["middlewares/userbyid.middleware",{"_index":1091,"title":{},"body":{"modules/UsersModule.html":{}}}],["miscellaneous",{"_index":1243,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1302,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1292,"title":{},"body":{"index.html":{}}}],["model",{"_index":122,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"classes/DoStuff.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":54,"title":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":56,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/articles/articles.module",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/auth.module",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/client/img/profile/default.png",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modules/users/interfaces/user.interface",{"_index":953,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["modules/users/schemas/user.schema",{"_index":954,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["modules/users/users.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["mongo",{"_index":1266,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mongodb",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongodb://localhost:27017/default",{"_index":803,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["mongoose",{"_index":125,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"classes/DoStuff.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["more",{"_index":1315,"title":{},"body":{"index.html":{}}}],["multer",{"_index":1219,"title":{},"body":{"dependencies.html":{}}}],["multerconfig",{"_index":1054,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":1321,"title":{},"body":{"index.html":{}}}],["name",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["nest/microservices",{"_index":1182,"title":{},"body":{"dependencies.html":{}}}],["nestframework",{"_index":1324,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/DoStuff.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":336,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"classes/DoStuff.html":{},"guards/RolesGuard.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":1185,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1052,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":27,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":119,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["nestmodule",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["new",{"_index":223,"title":{},"body":{"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"injectables/LocalStrategy.html":{},"injectables/SharedVariables.html":{},"injectables/TwitterStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser._id",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.save",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":114,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["next(new",{"_index":150,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["node",{"_index":1221,"title":{},"body":{"dependencies.html":{}}}],["node.js",{"_index":1271,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1223,"title":{},"body":{"dependencies.html":{}}}],["non",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["none",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["npm",{"_index":1286,"title":{},"body":{"index.html":{}}}],["nuestro",{"_index":773,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["null",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":780,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IJwtPayload.html":{},"injectables/SharedVariables.html":{}}}],["number.max_value",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["numbers",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["oauth",{"_index":591,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["oauth2",{"_index":1225,"title":{},"body":{"dependencies.html":{}}}],["oauth_redirect_uri",{"_index":821,"title":{},"body":{"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/ITwitterConfig.html":{},"miscellaneous/variables.html":{}}}],["oauth_token",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["oauth_token_secret",{"_index":602,"title":{},"body":{"injectables/AuthService.html":{}}}],["oauth_verifier",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["object",{"_index":840,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["objectschema",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objetos",{"_index":749,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["observable",{"_index":28,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"injectables/SharedVariables.html":{}}}],["obtendr",{"_index":769,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["one",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ongatewayinit",{"_index":8,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["open",{"_index":1304,"title":{},"body":{"index.html":{}}}],["optional",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/functions.html":{}}}],["opts",{"_index":1146,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["origin",{"_index":1255,"title":{},"body":{"miscellaneous/functions.html":{}}}],["out",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1334,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1181,"title":{"dependencies.html":{}},"body":{}}],["para",{"_index":789,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["param",{"_index":192,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["parameter",{"_index":1260,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":308,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["parse",{"_index":651,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["parse(readfilesync(filepath",{"_index":657,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["parsedresponse",{"_index":628,"title":{},"body":{"injectables/AuthService.html":{}}}],["parsedresponse[match.shift",{"_index":633,"title":{},"body":{"injectables/AuthService.html":{}}}],["parsedtoken",{"_index":955,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["parseimageurl",{"_index":331,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["parseimageurl(file.path",{"_index":1016,"title":{},"body":{"injectables/UserService.html":{}}}],["parser",{"_index":1188,"title":{},"body":{"dependencies.html":{}}}],["parsetwitterresponse",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["parsetwitterresponse(response",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":434,"title":{},"body":{"modules/AuthModule.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{},"dependencies.html":{}}}],["passport/facebook.strategy",{"_index":438,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/google",{"_index":440,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/jwt.strategy",{"_index":437,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/local.strategy",{"_index":436,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/twitter.strategy",{"_index":439,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/verifier",{"_index":449,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":865,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":871,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passreqtocallback",{"_index":669,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["password",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["passwordfield",{"_index":883,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["patch",{"_index":190,"title":{},"body":{"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{}}}],["patch(':articleid",{"_index":237,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["patch(':articleid')@roles('user",{"_index":183,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["patch(article",{"_index":317,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["patcharticlebyid",{"_index":166,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["patcharticlebyid(@req",{"_index":238,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["patcharticlebyid(req",{"_index":182,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["path",{"_index":294,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["payload",{"_index":864,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":870,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":828,"title":{},"body":{"interfaces/IJwtPayload.html":{},"coverage.html":{}}}],["photos",{"_index":677,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["picture?type=large",{"_index":702,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["pkihc4",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["please",{"_index":1313,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["plus",{"_index":723,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["plus.strategy",{"_index":441,"title":{},"body":{"modules/AuthModule.html":{}}}],["plus.strategy.ts",{"_index":715,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plus.strategy.ts:16",{"_index":717,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["plus.strategy.ts:21",{"_index":718,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["poolsize",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":188,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["post('')@roles('user",{"_index":169,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["post('facebook/signin",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('facebook/token",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('google/signin",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('google/token",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('local/signin",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('local/signup",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('twitter/signin",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('twitter/token",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":160,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["previously",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":107,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/IoConnector.html":{},"injectables/LocalStrategy.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{}}}],["proceso",{"_index":264,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["process.cwd",{"_index":793,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["produccion",{"_index":757,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":762,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":680,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["profile._json",{"_index":684,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["profile.displayname",{"_index":697,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["profile.emails",{"_index":709,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profile.emails.shift().value",{"_index":687,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profile.emails[0].value",{"_index":729,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["profile.emails[0].value.split('@')[0",{"_index":710,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profile.id",{"_index":699,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["profile.id}@${profile.provider}.com",{"_index":690,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profile.name",{"_index":711,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profile.name.familyname",{"_index":696,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["profile.name.givenname",{"_index":695,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["profile.name.givenname[0",{"_index":712,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profile.username",{"_index":698,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["profilefields",{"_index":675,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["profileimageurl",{"_index":700,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":1270,"title":{},"body":{"index.html":{}}}],["project",{"_index":1305,"title":{},"body":{"index.html":{}}}],["promise",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["promise((resolve",{"_index":570,"title":{},"body":{"injectables/AuthService.html":{}}}],["prop",{"_index":655,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["properties",{"_index":10,"title":{},"body":{"classes/AppGateway.html":{},"injectables/ArticleIdMiddleware.html":{},"classes/ArticlesGateway.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"injectables/SharedVariables.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{}}}],["propiedades",{"_index":772,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["provide",{"_index":236,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":137,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"controllers/UsersController.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["providerdata",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["providerdata.accesstoken",{"_index":685,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["providerdata.image.url",{"_index":731,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["providerdata.picture",{"_index":730,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["providerdata.refreshtoken",{"_index":686,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["provideridentifierfield",{"_index":704,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["providers",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provideruserprofile",{"_index":694,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["provideruserprofile.username",{"_index":732,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["public",{"_index":280,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{}}}],["put",{"_index":189,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["put(':articleid",{"_index":233,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["put(':articleid')@roles('user",{"_index":186,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["put(':id",{"_index":1073,"title":{},"body":{"controllers/UsersController.html":{}}}],["put(':id')@roles('user",{"_index":1043,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('upload",{"_index":1065,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('upload')@roles('user",{"_index":1046,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":1004,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["queryparams",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{}}}],["randombytes(128).tostring('base64",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["read",{"_index":1314,"title":{},"body":{"index.html":{}}}],["readfilesync",{"_index":653,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["readonly",{"_index":206,"title":{},"body":{"controllers/ArticlesController.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TenantMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["reconnectinterval",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reconnecttries",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redirect_uri",{"_index":562,"title":{},"body":{"injectables/AuthService.html":{}}}],["redirect_uri=${this.fbconfig.oauth_redirect_uri",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{}}}],["redirect_uri=${this.googleconfig.oauth_redirect_uri",{"_index":606,"title":{},"body":{"injectables/AuthService.html":{}}}],["ref",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1231,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":907,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refreshtoken",{"_index":679,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["regex",{"_index":621,"title":{},"body":{"injectables/AuthService.html":{}}}],["regex.exec(response",{"_index":631,"title":{},"body":{"injectables/AuthService.html":{}}}],["regexp",{"_index":622,"title":{},"body":{"injectables/AuthService.html":{}}}],["regexpmatcharray",{"_index":630,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject",{"_index":571,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject(body.error",{"_index":576,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject(err",{"_index":588,"title":{},"body":{"injectables/AuthService.html":{}}}],["reject(error",{"_index":574,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":1283,"title":{},"body":{"index.html":{}}}],["req",{"_index":172,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["req.article",{"_index":142,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["req.baseurl",{"_index":900,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.body",{"_index":225,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["req.body.email",{"_index":1098,"title":{},"body":{"injectables/Verifier.html":{}}}],["req.body.oauth_verifier",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.headers.authorization",{"_index":956,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["req.model",{"_index":1072,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.query",{"_index":1077,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.user",{"_index":917,"title":{},"body":{"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"controllers/UsersController.html":{}}}],["req.user._id",{"_index":227,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["req['dbconnection",{"_index":682,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/Verifier.html":{}}}],["request",{"_index":117,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/DoStuff.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"dependencies.html":{}}}],["request.article",{"_index":155,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{}}}],["request.model",{"_index":988,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["request['dbconnection",{"_index":145,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{}}}],["request_token_uri",{"_index":834,"title":{},"body":{"interfaces/ITwitterConfig.html":{},"miscellaneous/variables.html":{}}}],["requestfacebookredirecturi",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["requestfacebookredirecturl",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestgoogleredirecturi",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["requestjsonwebtokenafterfacebooksignin",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterfacebooksignin(@req",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterfacebooksignin(req",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenaftergooglesignin",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenaftergooglesignin(@req",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenaftergooglesignin(req",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterlocalsignin",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterlocalsignin(@req",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterlocalsignin(req",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterlocalsignup",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterlocalsignup(@req",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenafterlocalsignup(req",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenaftertwittersignin",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenaftertwittersignin(@req",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestjsonwebtokenaftertwittersignin(req",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestmethod",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["requestmethod.all",{"_index":299,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{}}}],["requestmethod.post",{"_index":296,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["requesttwitterredirecturi",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["require('passport",{"_index":664,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":587,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["res.status(500).send(ex",{"_index":959,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["reset",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["resetpasswordexpires",{"_index":837,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["resetpasswordtoken",{"_index":838,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["resolve",{"_index":600,"title":{},"body":{"injectables/AuthService.html":{}}}],["resolve(body",{"_index":589,"title":{},"body":{"injectables/AuthService.html":{}}}],["response",{"_index":113,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/AuthService.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{}}}],["response_type",{"_index":824,"title":{},"body":{"interfaces/IGoogleConfig.html":{},"miscellaneous/variables.html":{}}}],["response_type=${this.googleconfig.response_type",{"_index":607,"title":{},"body":{"injectables/AuthService.html":{}}}],["respuesta",{"_index":274,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["rest",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restarted",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restricted",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result",{"_index":51,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/DoStuff.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.error",{"_index":1108,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["result.error.details.shift().message",{"_index":1110,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["results",{"_index":53,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/DoStuff.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":149,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["returning",{"_index":139,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["returns",{"_index":21,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["rimraf",{"_index":1234,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":211,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["role.includes(role",{"_index":920,"title":{},"body":{"guards/RolesGuard.html":{}}}],["roles",{"_index":199,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IUser.html":{},"guards/RolesGuard.html":{},"injectables/TwitterStrategy.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":1080,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles('user",{"_index":220,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["rolesguard",{"_index":197,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rootpath",{"_index":776,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["route",{"_index":217,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["routes",{"_index":212,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["run",{"_index":304,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["running",{"_index":1288,"title":{},"body":{"index.html":{}}}],["ruta",{"_index":791,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":29,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"injectables/SharedVariables.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":31,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["s3",{"_index":1197,"title":{},"body":{"dependencies.html":{}}}],["saber",{"_index":790,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["salt",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["salt).update(password).digest('hex",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scaffold",{"_index":1326,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":1275,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schema.types.objectid",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schemas/article.schema",{"_index":129,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{}}}],["schemas/user.schema",{"_index":976,"title":{},"body":{"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{}}}],["scope",{"_index":326,"title":{},"body":{"injectables/ArticlesService.html":{},"classes/DoStuff.html":{}}}],["scope=${this.googleconfig.scopes.join",{"_index":608,"title":{},"body":{"injectables/AuthService.html":{}}}],["scopes",{"_index":825,"title":{},"body":{"interfaces/IGoogleConfig.html":{},"miscellaneous/variables.html":{}}}],["sdk",{"_index":1210,"title":{},"body":{"dependencies.html":{}}}],["se",{"_index":759,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":875,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":1252,"title":{},"body":{"miscellaneous/functions.html":{}}}],["según",{"_index":758,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["sendarticleslistfromsocket",{"_index":245,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["sendarticleslistfromsocket(articles",{"_index":254,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["sendcreatedarticle",{"_index":246,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["sendcreatedarticle(article",{"_index":256,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["sendmessage",{"_index":844,"title":{},"body":{"classes/IoConnector.html":{}}}],["ser",{"_index":271,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["server",{"_index":11,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{},"classes/IoConnector.html":{},"dependencies.html":{},"index.html":{}}}],["server.constants",{"_index":132,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{}}}],["server_config",{"_index":327,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["server_config.db_uri",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server_config.httpprotocol}://${server_config.domain}:${server_config.httpport",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["server_config.jwtsecret",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TokenMiddleware.html":{}}}],["server_config_token",{"_index":1175,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["serverconfigtoken",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["service",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["servidor",{"_index":37,"title":{},"body":{"classes/AppGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["session",{"_index":456,"title":{},"body":{"modules/AuthModule.html":{},"controllers/UsersController.html":{}}}],["set",{"_index":726,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["seteamos",{"_index":788,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":1470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sharedvariables",{"_index":922,"title":{"injectables/SharedVariables.html":{}},"body":{"injectables/SharedVariables.html":{},"coverage.html":{}}}],["side",{"_index":1276,"title":{},"body":{"index.html":{}}}],["sign",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":455,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["simplecounter",{"_index":926,"title":{},"body":{"injectables/SharedVariables.html":{}}}],["socket",{"_index":267,"title":{},"body":{"classes/ArticlesGateway.html":{},"classes/IoConnector.html":{}}}],["socket.disconnect",{"_index":857,"title":{},"body":{"classes/IoConnector.html":{}}}],["socket.io",{"_index":849,"title":{},"body":{"classes/IoConnector.html":{},"dependencies.html":{}}}],["socket.on('connect",{"_index":851,"title":{},"body":{"classes/IoConnector.html":{}}}],["socket.on('messages",{"_index":853,"title":{},"body":{"classes/IoConnector.html":{}}}],["socketio",{"_index":848,"title":{},"body":{"classes/IoConnector.html":{}}}],["socketio(this.url",{"_index":850,"title":{},"body":{"classes/IoConnector.html":{}}}],["sockets",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["sockettimeoutms",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"controllers/ArticlesController.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/DoStuff.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"classes/IoConnector.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"index.html":{}}}],["sparse",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sponsors",{"_index":1308,"title":{},"body":{"index.html":{}}}],["src/.../article.joi.ts",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../article.schema.ts",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../articles.providers.ts",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.providers.ts",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config.ts",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../converters.ts",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.providers.ts",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../encryption.ts",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../error",{"_index":1248,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../facebook",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../facebook.strategy.ts",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../google",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../keys.ts",{"_index":1246,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1245,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../multer.ts",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../server.constants.ts",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../twitter",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../twitter.strategy.ts",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1249,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.providers.ts",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":1247,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.gateway.ts",{"_index":6,"title":{},"body":{"classes/AppGateway.html":{},"coverage.html":{}}}],["src/app.gateway.ts:14",{"_index":16,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.gateway.ts:20",{"_index":20,"title":{},"body":{"classes/AppGateway.html":{}}}],["src/app.module.ts",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:33",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["src/common/helpers/class.ts",{"_index":638,"title":{},"body":{"classes/DoStuff.html":{},"coverage.html":{}}}],["src/common/helpers/class.ts:7",{"_index":639,"title":{},"body":{"classes/DoStuff.html":{}}}],["src/common/helpers/converters.ts",{"_index":1129,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/helpers/error",{"_index":1131,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/helpers/utils.ts",{"_index":1136,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/middlewares/logger.middleware.ts",{"_index":888,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/common/middlewares/logger.middleware.ts:7",{"_index":890,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/common/middlewares/tenant.middleware.ts",{"_index":939,"title":{},"body":{"injectables/TenantMiddleware.html":{},"coverage.html":{}}}],["src/common/middlewares/tenant.middleware.ts:11",{"_index":941,"title":{},"body":{"injectables/TenantMiddleware.html":{}}}],["src/common/middlewares/tenant.middleware.ts:14",{"_index":942,"title":{},"body":{"injectables/TenantMiddleware.html":{}}}],["src/common/middlewares/token.middleware.ts",{"_index":949,"title":{},"body":{"injectables/TokenMiddleware.html":{},"coverage.html":{}}}],["src/common/middlewares/token.middleware.ts:14",{"_index":950,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["src/common/middlewares/token.middleware.ts:17",{"_index":951,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["src/config/config.ts",{"_index":744,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/config.ts:28",{"_index":764,"title":{},"body":{"interfaces/IConfig.html":{}}}],["src/config/multer.ts",{"_index":1143,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module.ts",{"_index":634,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.providers.ts",{"_index":1145,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/roles.decorator.ts",{"_index":1147,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environment.variables.ts",{"_index":644,"title":{},"body":{"classes/EnvironmentService.html":{},"coverage.html":{}}}],["src/environment.variables.ts:11",{"_index":650,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["src/environment.variables.ts:5",{"_index":647,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["src/guards/roles.guard.ts",{"_index":904,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/guards/roles.guard.ts:10",{"_index":911,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/guards/roles.guard.ts:5",{"_index":908,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/main.ts",{"_index":1148,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/modules/articles/articles.controller.ts",{"_index":159,"title":{},"body":{"controllers/ArticlesController.html":{},"coverage.html":{}}}],["src/modules/articles/articles.controller.ts:108",{"_index":184,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["src/modules/articles/articles.controller.ts:121",{"_index":175,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["src/modules/articles/articles.controller.ts:53",{"_index":181,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["src/modules/articles/articles.controller.ts:66",{"_index":171,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["src/modules/articles/articles.controller.ts:82",{"_index":178,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["src/modules/articles/articles.controller.ts:95",{"_index":187,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["src/modules/articles/articles.gateway.ts",{"_index":243,"title":{},"body":{"classes/ArticlesGateway.html":{},"coverage.html":{}}}],["src/modules/articles/articles.gateway.ts:14",{"_index":247,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["src/modules/articles/articles.gateway.ts:20",{"_index":248,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["src/modules/articles/articles.gateway.ts:23",{"_index":255,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["src/modules/articles/articles.gateway.ts:27",{"_index":257,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["src/modules/articles/articles.gateway.ts:36",{"_index":252,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["src/modules/articles/articles.module.ts",{"_index":279,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["src/modules/articles/articles.module.ts:30",{"_index":281,"title":{},"body":{"modules/ArticlesModule.html":{}}}],["src/modules/articles/articles.providers.ts",{"_index":1150,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/articles/articles.service.ts",{"_index":307,"title":{},"body":{"injectables/ArticlesService.html":{},"coverage.html":{}}}],["src/modules/articles/articles.service.ts:17",{"_index":322,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/modules/articles/articles.service.ts:18",{"_index":323,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/modules/articles/articles.service.ts:19",{"_index":311,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/modules/articles/articles.service.ts:25",{"_index":313,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/modules/articles/articles.service.ts:33",{"_index":316,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/modules/articles/articles.service.ts:41",{"_index":321,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/modules/articles/articles.service.ts:51",{"_index":319,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/modules/articles/articles.service.ts:59",{"_index":315,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["src/modules/articles/interfaces/article.interface.ts",{"_index":736,"title":{},"body":{"interfaces/IArticle.html":{},"coverage.html":{}}}],["src/modules/articles/joi/article.joi.ts",{"_index":1154,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/articles/middlewares/article",{"_index":1100,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"coverage.html":{}}}],["src/modules/articles/middlewares/articlebyid.middleware.ts",{"_index":106,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"coverage.html":{}}}],["src/modules/articles/middlewares/articlebyid.middleware.ts:19",{"_index":111,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{}}}],["src/modules/articles/middlewares/articlebyid.middleware.ts:22",{"_index":116,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{}}}],["src/modules/articles/schemas/article.schema.ts",{"_index":1155,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:15",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:20",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:25",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:30",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:35",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:40",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:45",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:50",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:55",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:60",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:65",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":431,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.module.ts:41",{"_index":432,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.providers.ts",{"_index":1157,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/modules/auth/auth.service.ts:104",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:149",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:177",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:223",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:237",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:285",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:29",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:30",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:31",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:43",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:76",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:87",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:91",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/config/facebook",{"_index":1159,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/config/google",{"_index":1162,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/config/twitter",{"_index":1163,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/interfaces/facebook",{"_index":817,"title":{},"body":{"interfaces/IFacebookConfig.html":{},"coverage.html":{}}}],["src/modules/auth/interfaces/google",{"_index":823,"title":{},"body":{"interfaces/IGoogleConfig.html":{},"coverage.html":{}}}],["src/modules/auth/interfaces/jwt",{"_index":827,"title":{},"body":{"interfaces/IJwtPayload.html":{},"coverage.html":{}}}],["src/modules/auth/interfaces/token.interface.ts",{"_index":832,"title":{},"body":{"interfaces/IToken.html":{},"coverage.html":{}}}],["src/modules/auth/interfaces/twitter",{"_index":833,"title":{},"body":{"interfaces/ITwitterConfig.html":{},"coverage.html":{}}}],["src/modules/auth/middlewares/body",{"_index":1114,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{}}}],["src/modules/auth/passport/facebook.strategy.ts",{"_index":659,"title":{},"body":{"injectables/FacebookStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/passport/facebook.strategy.ts:17",{"_index":661,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/modules/auth/passport/facebook.strategy.ts:22",{"_index":662,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["src/modules/auth/passport/google",{"_index":714,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/passport/jwt.strategy.ts",{"_index":858,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/passport/jwt.strategy.ts:11",{"_index":861,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/passport/jwt.strategy.ts:19",{"_index":863,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/modules/auth/passport/local.strategy.ts",{"_index":878,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/modules/auth/passport/local.strategy.ts:16",{"_index":879,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/passport/local.strategy.ts:21",{"_index":880,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/modules/auth/passport/twitter.strategy.ts",{"_index":960,"title":{},"body":{"injectables/TwitterStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/passport/twitter.strategy.ts:17",{"_index":962,"title":{},"body":{"injectables/TwitterStrategy.html":{}}}],["src/modules/auth/passport/twitter.strategy.ts:24",{"_index":963,"title":{},"body":{"injectables/TwitterStrategy.html":{}}}],["src/modules/auth/passport/verifier.ts",{"_index":1095,"title":{},"body":{"injectables/Verifier.html":{},"coverage.html":{}}}],["src/modules/auth/passport/verifier.ts:11",{"_index":1097,"title":{},"body":{"injectables/Verifier.html":{}}}],["src/modules/auth/passport/verifier.ts:9",{"_index":1096,"title":{},"body":{"injectables/Verifier.html":{}}}],["src/modules/users/interfaces/user.interface.ts",{"_index":835,"title":{},"body":{"interfaces/IUser.html":{},"coverage.html":{}}}],["src/modules/users/joi/auth",{"_index":1166,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/middlewares/userbyid.middleware.ts",{"_index":971,"title":{},"body":{"injectables/UserIdMiddleware.html":{},"coverage.html":{}}}],["src/modules/users/middlewares/userbyid.middleware.ts:18",{"_index":972,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["src/modules/users/middlewares/userbyid.middleware.ts:21",{"_index":973,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["src/modules/users/schemas/user.schema.ts",{"_index":1168,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/users.controller.ts",{"_index":1026,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:104",{"_index":1038,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:117",{"_index":1032,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:53",{"_index":1041,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:66",{"_index":1048,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:79",{"_index":1035,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:92",{"_index":1044,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":1086,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.module.ts:27",{"_index":1087,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.providers.ts",{"_index":1171,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/users.service.ts",{"_index":990,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:17",{"_index":1012,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/users/users.service.ts:18",{"_index":996,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/users/users.service.ts:24",{"_index":1007,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/users/users.service.ts:28",{"_index":1003,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/users/users.service.ts:32",{"_index":1009,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/users/users.service.ts:37",{"_index":1000,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/users/users.service.ts:41",{"_index":998,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/users/users.service.ts:45",{"_index":1011,"title":{},"body":{"injectables/UserService.html":{}}}],["src/server.constants.ts",{"_index":1172,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/shared",{"_index":923,"title":{},"body":{"injectables/SharedVariables.html":{},"coverage.html":{}}}],["src/utilities/encryption.ts",{"_index":1177,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utilities/io",{"_index":842,"title":{},"body":{"classes/IoConnector.html":{},"coverage.html":{}}}],["src/utilities/keys.ts",{"_index":1178,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["sta",{"_index":38,"title":{},"body":{"classes/AppGateway.html":{}}}],["start",{"_index":1290,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1293,"title":{},"body":{"index.html":{}}}],["start:prod",{"_index":1294,"title":{},"body":{"index.html":{}}}],["started",{"_index":1269,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1282,"title":{},"body":{"index.html":{}}}],["state",{"_index":822,"title":{},"body":{"interfaces/IFacebookConfig.html":{},"miscellaneous/variables.html":{}}}],["state=${this.fbconfig.state",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{}}}],["statements",{"_index":1125,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":1317,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1144,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["store",{"_index":1327,"title":{},"body":{"index.html":{}}}],["strategies",{"_index":435,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":867,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TwitterStrategy.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["string().alphanum().min(6).max(36).required",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string().email().required",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string().required",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stuff",{"_index":641,"title":{},"body":{"classes/DoStuff.html":{},"injectables/UserService.html":{}}}],["sub",{"_index":831,"title":{},"body":{"interfaces/IJwtPayload.html":{}}}],["subscribemessage",{"_index":24,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["subscribemessage('articles",{"_index":251,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["super",{"_index":872,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["superadmin",{"_index":1031,"title":{},"body":{"controllers/UsersController.html":{}}}],["support",{"_index":1301,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1330,"title":{},"body":{"modules.html":{}}}],["table",{"_index":1180,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1179,"title":{},"body":{"coverage.html":{}}}],["tenantmiddleware",{"_index":96,"title":{"injectables/TenantMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/TenantMiddleware.html":{},"coverage.html":{}}}],["test",{"_index":1295,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":1300,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1299,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1297,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1307,"title":{},"body":{"index.html":{}}}],["this.articlemodel",{"_index":146,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/ArticlesService.html":{}}}],["this.articlemodel.create(article",{"_index":339,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["this.articlemodel.find",{"_index":345,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["this.articlemodel.findbyid(request.params.articleid",{"_index":154,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{}}}],["this.articlesservice.create(article",{"_index":228,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["this.articlesservice.delete(article",{"_index":242,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["this.articlesservice.list",{"_index":222,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["this.articlesservice.patch(article",{"_index":239,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["this.articlesservice.update(article",{"_index":235,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["this.articlessocket.sendcreatedarticle(article",{"_index":229,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["this.authservice.createtoken(req.user",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.createuserandreturntoken(req.body",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.facebooksignin(req.body.code",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.finduserbyid(payload.sub",{"_index":876,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.googlesignin(req.body.code",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.requestfacebookredirecturi",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.requestgoogleredirecturi",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.requesttwitterredirecturi",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.twittersignin(req.body.oauth_token",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.connection.usedb(database",{"_index":948,"title":{},"body":{"injectables/TenantMiddleware.html":{}}}],["this.envconfig",{"_index":656,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["this.envconfig[key",{"_index":658,"title":{},"body":{"classes/EnvironmentService.html":{}}}],["this.fbconfig.access_token_uri}?${queryparams.join",{"_index":569,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.fbconfig.client_id",{"_index":672,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["this.fbconfig.client_secret",{"_index":674,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["this.fbconfig.login_dialog_uri}?${queryparams.join",{"_index":563,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.googleconfig.access_token_uri",{"_index":610,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.googleconfig.client_id",{"_index":612,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["this.googleconfig.client_secret",{"_index":614,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{}}}],["this.googleconfig.grant_type",{"_index":617,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.googleconfig.login_dialog_uri}?${queryparams.join",{"_index":609,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.googleconfig.oauth_redirect_uri",{"_index":615,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.init",{"_index":667,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{}}}],["this.parsetwitterresponse(body",{"_index":598,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.get('roles",{"_index":914,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.server.authenticatedusers",{"_index":43,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.server.authenticatedusers.push",{"_index":46,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.server.emit('articlechannel",{"_index":261,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["this.server.emit('articles",{"_index":259,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["this.server.sockets.on('connection",{"_index":44,"title":{},"body":{"classes/AppGateway.html":{}}}],["this.simplecounter.asobservable",{"_index":932,"title":{},"body":{"injectables/SharedVariables.html":{}}}],["this.simplecounter.next(number",{"_index":938,"title":{},"body":{"injectables/SharedVariables.html":{}}}],["this.twitterconfig.access_token_uri",{"_index":601,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.twitterconfig.consumer_key",{"_index":593,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwitterStrategy.html":{}}}],["this.twitterconfig.consumer_secret",{"_index":595,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwitterStrategy.html":{}}}],["this.twitterconfig.login_dialog_uri}?oauth_token=${oauth_token",{"_index":599,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.twitterconfig.oauth_redirect_uri",{"_index":597,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.twitterconfig.request_token_uri",{"_index":590,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.url",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.url}/api/auth/facebook/token",{"_index":579,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.url}/api/auth/google/token",{"_index":618,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.url}/api/auth/twitter/token",{"_index":604,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{}}}],["this.usermodel(provideruserprofile",{"_index":705,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["this.usermodel.find(query).select",{"_index":1013,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(id",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.findbyid(parsedtoken['_id']).select",{"_index":958,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["this.usermodel.findbyid(request.params.id).select",{"_index":985,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["this.usermodel.findbyid(userid).select",{"_index":1017,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":692,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{},"injectables/Verifier.html":{}}}],["this.userservice.deleteuser(user",{"_index":1082,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.getusers(query",{"_index":1078,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.me(req.user",{"_index":1063,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.updateprofileimage(user",{"_index":1068,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.updateuser(req.model",{"_index":1075,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":342,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{}}}],["time",{"_index":47,"title":{},"body":{"classes/AppGateway.html":{}}}],["tipados",{"_index":750,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["title",{"_index":741,"title":{},"body":{"interfaces/IArticle.html":{},"miscellaneous/variables.html":{}}}],["todas",{"_index":770,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["token",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IToken.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["tokenmiddleware",{"_index":98,"title":{"injectables/TokenMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/TokenMiddleware.html":{},"coverage.html":{}}}],["tokens",{"_index":728,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["touch",{"_index":1318,"title":{},"body":{"index.html":{}}}],["trabajo",{"_index":775,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["transformer",{"_index":1213,"title":{},"body":{"dependencies.html":{}}}],["trim",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":670,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":338,"title":{},"body":{"injectables/ArticlesService.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/variables.html":{}}}],["ts",{"_index":1238,"title":{},"body":{"dependencies.html":{}}}],["twitter",{"_index":965,"title":{},"body":{"injectables/TwitterStrategy.html":{},"injectables/UserService.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["twitter.id",{"_index":969,"title":{},"body":{"injectables/TwitterStrategy.html":{}}}],["twitter_config_token",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwitterStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["twitterconfig",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwitterStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["twitterconfigtoken",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["twittersignin",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["twittersignin(@req",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{}}}],["twittersignin(oauth_token",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["twittersignin(req",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{}}}],["twitterstrategy",{"_index":430,"title":{"injectables/TwitterStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/TwitterStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["twittertokenstrategy",{"_index":964,"title":{},"body":{"injectables/TwitterStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/ArticleIdMiddleware.html":{},"modules/ArticlesModule.html":{},"injectables/ArticlesService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EnvironmentService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IArticle.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"interfaces/IFacebookConfig.html":{},"interfaces/IGoogleConfig.html":{},"interfaces/IJwtPayload.html":{},"interfaces/IToken.html":{},"interfaces/ITwitterConfig.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/SharedVariables.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":123,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/UserIdMiddleware.html":{},"injectables/articleValidatorMiddleware.html":{}}}],["types/cookie",{"_index":1187,"title":{},"body":{"dependencies.html":{}}}],["types/helmet",{"_index":1190,"title":{},"body":{"dependencies.html":{}}}],["types/joi",{"_index":1192,"title":{},"body":{"dependencies.html":{}}}],["types/mongoose",{"_index":1194,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":1196,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1199,"title":{},"body":{"dependencies.html":{}}}],["types/request",{"_index":1203,"title":{},"body":{"dependencies.html":{}}}],["types/uuid",{"_index":1205,"title":{},"body":{"dependencies.html":{}}}],["types/ws",{"_index":1207,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1281,"title":{},"body":{"index.html":{}}}],["un",{"_index":266,"title":{},"body":{"classes/ArticlesGateway.html":{},"miscellaneous/functions.html":{}}}],["una",{"_index":273,"title":{},"body":{"classes/ArticlesGateway.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["unauthorized_email_or_username_in_use",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorized_invalid_email",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorized_invalid_password",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorized_unrecognized_bearer",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":118,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{}}}],["unauthorizedexception('invalid",{"_index":151,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{}}}],["unauthorizedexception('no",{"_index":156,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/UserIdMiddleware.html":{}}}],["unauthorizedexception('user",{"_index":983,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["unauthorizedexception(messages.unauthorized_email_or_username_in_use",{"_index":1099,"title":{},"body":{"injectables/Verifier.html":{}}}],["unauthorizedexception(messages.unauthorized_invalid_email",{"_index":884,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unauthorizedexception(messages.unauthorized_invalid_password",{"_index":886,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":703,"title":{},"body":{"injectables/FacebookStrategy.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":1265,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":1296,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unrecognized",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":309,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["update(article",{"_index":320,"title":{},"body":{"injectables/ArticlesService.html":{}}}],["updatearticlebyid",{"_index":167,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["updatearticlebyid(@req",{"_index":234,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["updatearticlebyid(req",{"_index":185,"title":{},"body":{"controllers/ArticlesController.html":{}}}],["updated",{"_index":839,"title":{},"body":{"interfaces/IUser.html":{},"miscellaneous/variables.html":{}}}],["updateprofileimage",{"_index":994,"title":{},"body":{"injectables/UserService.html":{}}}],["updateprofileimage(user",{"_index":1008,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser",{"_index":995,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(user",{"_index":1010,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserbyid",{"_index":1027,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserbyid(@req",{"_index":1074,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserbyid(req",{"_index":1042,"title":{},"body":{"controllers/UsersController.html":{}}}],["updating",{"_index":1024,"title":{},"body":{"injectables/UserService.html":{}}}],["upload",{"_index":978,"title":{},"body":{"injectables/UserIdMiddleware.html":{}}}],["uploadedfile",{"_index":1049,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadfile",{"_index":1028,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadfile(@uploadedfile",{"_index":1067,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadfile(file",{"_index":1045,"title":{},"body":{"controllers/UsersController.html":{}}}],["uri",{"_index":568,"title":{},"body":{"injectables/AuthService.html":{}}}],["url",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{},"classes/IoConnector.html":{},"injectables/LoggerMiddleware.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["urlencoded",{"_index":585,"title":{},"body":{"injectables/AuthService.html":{}}}],["use",{"_index":110,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["use('facebook",{"_index":668,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["use('google",{"_index":725,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["use('local",{"_index":881,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["use('twitter",{"_index":966,"title":{},"body":{"injectables/TwitterStrategy.html":{}}}],["use(req",{"_index":889,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/TenantMiddleware.html":{},"injectables/TokenMiddleware.html":{},"injectables/Verifier.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["use(request",{"_index":112,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/UserIdMiddleware.html":{}}}],["usecreateindex",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefactory",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":193,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(rolesguard",{"_index":204,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":1050,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1066,"title":{},"body":{"controllers/UsersController.html":{}}}],["usenewurlparser",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":219,"title":{},"body":{"controllers/ArticlesController.html":{},"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"injectables/Verifier.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.facebook.id",{"_index":1022,"title":{},"body":{"injectables/UserService.html":{}}}],["user.firstname",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.google.id",{"_index":1019,"title":{},"body":{"injectables/UserService.html":{}}}],["user.id",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.joi",{"_index":1119,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{}}}],["user.joi.ts",{"_index":1167,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.lastname",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.local.email",{"_index":1020,"title":{},"body":{"injectables/UserService.html":{}}}],["user.password",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["user.profileimageurl",{"_index":1014,"title":{},"body":{"injectables/UserService.html":{}}}],["user.remove",{"_index":1018,"title":{},"body":{"injectables/UserService.html":{}}}],["user.roles",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.save",{"_index":706,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserService.html":{}}}],["user.twitter.id",{"_index":1021,"title":{},"body":{"injectables/UserService.html":{}}}],["user.username",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["user['roles",{"_index":921,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user['roles'].some((role",{"_index":919,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user_id",{"_index":603,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_model_token",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userid",{"_index":1001,"title":{},"body":{"injectables/UserService.html":{}}}],["useridmiddleware",{"_index":970,"title":{"injectables/UserIdMiddleware.html":{}},"body":{"injectables/UserIdMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usermodel",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{}}}],["username",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IUser.html":{},"injectables/TwitterStrategy.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["username.tolowercase",{"_index":713,"title":{},"body":{"injectables/FacebookStrategy.html":{}}}],["usernamefield",{"_index":882,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userproviders",{"_index":1089,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":300,"title":{},"body":{"modules/ArticlesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.controller",{"_index":1088,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.providers",{"_index":1090,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1053,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/:id",{"_index":1094,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/interfaces/user.interface",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{},"injectables/Verifier.html":{}}}],["users/joi/auth",{"_index":1118,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{}}}],["users/schemas/user.schema",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TwitterStrategy.html":{},"injectables/Verifier.html":{}}}],["users/users.module",{"_index":442,"title":{},"body":{"modules/AuthModule.html":{}}}],["userschema",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TokenMiddleware.html":{},"injectables/TwitterStrategy.html":{},"injectables/UserIdMiddleware.html":{},"injectables/UserService.html":{},"injectables/Verifier.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1025,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":989,"title":{"injectables/UserService.html":{}},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":68,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usevalue",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usuarios",{"_index":42,"title":{},"body":{"classes/AppGateway.html":{}}}],["utilities/encryption",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["utilities/keys",{"_index":767,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{}}}],["uuid",{"_index":720,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["v1",{"_index":719,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["v2.0",{"_index":1328,"title":{},"body":{"index.html":{}}}],["valid",{"_index":138,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":859,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"miscellaneous/variables.html":{}}}],["validate(payload",{"_index":862,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(req.body",{"_index":1107,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["validateusername",{"_index":1169,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["validateusername(username",{"_index":1267,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validating",{"_index":136,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{}}}],["validator",{"_index":1120,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{},"dependencies.html":{}}}],["validator.middleware",{"_index":290,"title":{},"body":{"modules/ArticlesModule.html":{},"modules/AuthModule.html":{}}}],["validator.middleware.ts",{"_index":1101,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{}}}],["validator.middleware.ts:13",{"_index":1115,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{}}}],["validator.middleware.ts:17",{"_index":1116,"title":{},"body":{"injectables/bodyValidatorMiddleware.html":{}}}],["validator.middleware.ts:19",{"_index":1102,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{}}}],["validator.middleware.ts:22",{"_index":1103,"title":{},"body":{"injectables/articleValidatorMiddleware.html":{}}}],["valores",{"_index":801,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":216,"title":{},"body":{"controllers/ArticlesController.html":{},"injectables/SharedVariables.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":683,"title":{},"body":{"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{}}}],["variable",{"_index":141,"title":{},"body":{"injectables/ArticleIdMiddleware.html":{},"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"injectables/articleValidatorMiddleware.html":{},"injectables/bodyValidatorMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":937,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/SharedVariables.html":{},"miscellaneous/variables.html":{}}}],["variables.ts",{"_index":924,"title":{},"body":{"injectables/SharedVariables.html":{},"coverage.html":{}}}],["variables.ts:10",{"_index":935,"title":{},"body":{"injectables/SharedVariables.html":{}}}],["variables.ts:12",{"_index":933,"title":{},"body":{"injectables/SharedVariables.html":{}}}],["variables.ts:14",{"_index":930,"title":{},"body":{"injectables/SharedVariables.html":{}}}],["variables.ts:8",{"_index":928,"title":{},"body":{"injectables/SharedVariables.html":{}}}],["verifier",{"_index":448,"title":{"injectables/Verifier.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/Verifier.html":{},"coverage.html":{}}}],["verifies",{"_index":1264,"title":{},"body":{"miscellaneous/functions.html":{}}}],["verify",{"_index":952,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["verify(token",{"_index":957,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["void",{"_index":22,"title":{},"body":{"classes/AppGateway.html":{},"modules/AppModule.html":{},"classes/ArticlesGateway.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"injectables/FacebookStrategy.html":{},"injectables/GoogleStrategy.html":{},"classes/IoConnector.html":{},"injectables/LocalStrategy.html":{},"injectables/LoggerMiddleware.html":{},"injectables/SharedVariables.html":{},"injectables/TwitterStrategy.html":{},"modules/UsersModule.html":{}}}],["watch",{"_index":1291,"title":{},"body":{"index.html":{}}}],["website",{"_index":1322,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":25,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["websocketserver",{"_index":19,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["word",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["work",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["working",{"_index":213,"title":{},"body":{"controllers/ArticlesController.html":{},"controllers/UsersController.html":{}}}],["works",{"_index":275,"title":{},"body":{"classes/ArticlesGateway.html":{}}}],["ws",{"_index":809,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["wsport",{"_index":781,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["wsprotocol",{"_index":785,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["wsresponse",{"_index":26,"title":{},"body":{"classes/AppGateway.html":{},"classes/ArticlesGateway.html":{}}}],["www",{"_index":583,"title":{},"body":{"injectables/AuthService.html":{}}}],["xcrso4bxergva9tifcak1onlcdm53cbu75rmevvbdz3jnb7dqn",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["y",{"_index":756,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IEnvironmentConfig.html":{},"miscellaneous/variables.html":{}}}],["yes",{"_index":1005,"title":{},"body":{"injectables/UserService.html":{}}}],["you'd",{"_index":1311,"title":{},"body":{"index.html":{}}}],["z",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z0",{"_index":625,"title":{},"body":{"injectables/AuthService.html":{}}}],["z_]+?)=([a",{"_index":623,"title":{},"body":{"injectables/AuthService.html":{}}}],["za",{"_index":624,"title":{},"body":{"injectables/AuthService.html":{}}}],["zoom",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/ArticlesModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AppGateway.html":{"url":"classes/AppGateway.html","title":"class - AppGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.gateway.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayInit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                afterInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app.gateway.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @WebSocketServer()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/app.gateway.ts:14\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            afterInit\n                        \n                        \n                    \n                \n            \n            \n                \nafterInit()\n                \n            \n\n\n            \n                \n                    Defined in src/app.gateway.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n  WsResponse,\n  OnGatewayInit\n} from '@nestjs/websockets';\nimport { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@WebSocketGateway()\n\nexport class AppGateway implements OnGatewayInit {\n  @WebSocketServer() server;\n\n  constructor() {\n    \n  }\n\n  afterInit() {\n    //  En cada conexión al servidor, ésta linea guardará a los usuarios\n    this.server.authenticatedUsers = [];\n    this.server.sockets.on('connection', function(socket) {\n      this.server.authenticatedUsers.push({ time: 1 });\n      console.log('User Connected');\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nArticlesModule\n\nArticlesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticlesModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ArticlesModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        // Nest\nimport { Module, NestModule, RequestMethod, MiddlewareConsumer } from '@nestjs/common';\n\n// Modules\nimport { UsersModule } from './modules/users/users.module';\nimport { ArticlesModule } from './modules/articles/articles.module';\nimport { AuthModule } from './modules/auth/auth.module';\n\n//  Database import\nimport { DatabaseModule } from './database';\n\n//  Gateway sockets\nimport { AppGateway } from './app.gateway';\nimport { LoggerMiddleware } from './common/middlewares/logger.middleware';\nimport { TenantMiddleware } from './common/middlewares/tenant.middleware';\nimport { TokenMiddleware } from './common/middlewares/token.middleware';\n\n@Module({\n\timports: [\n\t\tDatabaseModule,\n\t\tUsersModule,\n\t\tArticlesModule,\n\t\tAuthModule\n\t],\n\tcontrollers: [\n\t],\n\tproviders: [\n\t\tAppGateway\n\t]\n})\n\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(LoggerMiddleware, TenantMiddleware, TokenMiddleware)\n      .forRoutes('*');\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticleIdMiddleware.html":{"url":"injectables/ArticleIdMiddleware.html","title":"injectable - ArticleIdMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ArticleIdMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/articles/middlewares/articleById.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                articleModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/articles/middlewares/articleById.middleware.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            use\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    use(request, response, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/middlewares/articleById.middleware.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            articleModel\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/modules/articles/middlewares/articleById.middleware.ts:19\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {\n  UnauthorizedException,\n  NestMiddleware, \n  Injectable, \n  Inject } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { Model, Types, Connection } from 'mongoose';\nimport { IArticle } from './../interfaces/article.interface';\nimport { ArticleSchema } from './../schemas/article.schema';\n\nimport { MESSAGES, ARTICLE_MODEL_TOKEN } from '../../../server.constants';\n\n@Injectable()\n/**\n *  Article By Id Middleware\n *  We validating if the Id provided is valid, and returning the found article in the variable req.article\n */\nexport class ArticleIdMiddleware implements NestMiddleware {\n  private articleModel;\n  constructor() {\n  }\n  async use(request, response, next: Function) {\n      const db = request['dbConnection'];\n      this.articleModel = db.model(ARTICLE_MODEL_TOKEN, ArticleSchema) as Model;\n\n      if(!Types.ObjectId.isValid(request.params.articleId)) return next(new UnauthorizedException('Invalid identifier'));\n      const article = await this.articleModel.findById(request.params.articleId);\n      if (article) {\n        request.article = article;\n        next();\n      }\n      else return next(new UnauthorizedException('No article with that identifier has been found'));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ArticlesController.html":{"url":"controllers/ArticlesController.html","title":"controller - ArticlesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ArticlesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/articles/articles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                articles\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteArticle\n                            \n                            \n                                    Async\n                                getArticleById\n                            \n                            \n                                    Async\n                                list\n                            \n                            \n                                    Async\n                                patchArticleById\n                            \n                            \n                                    Async\n                                updateArticleById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/articles/articles.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteArticle\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteArticle(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':articleId')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/articles/articles.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getArticleById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getArticleById(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':articleId')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/articles/articles.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            list\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    list(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/articles/articles.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            patchArticleById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patchArticleById(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':articleId')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/articles/articles.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateArticleById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateArticleById(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':articleId')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/articles/articles.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { \n  Controller,\n  Post, \n  Get,\n  Put,\n  Patch,\n  Delete,\n  Param,\n  UseGuards,\n  Inject,\n  Req } from '@nestjs/common';\n\nimport { ArticlesService } from './articles.service';\n\n// Guards\nimport { RolesGuard } from '../../guards/roles.guard';\nimport { Roles } from '../../decorators/roles.decorator';\n\nimport { ArticlesGateway } from '../articles/articles.gateway';\n\n@Controller('articles')\n@UseGuards(RolesGuard)\nexport class ArticlesController {\n  constructor(@Inject(ArticlesService) private readonly articlesService, \n              private readonly articlesSocket: ArticlesGateway) {\n  }\n  /* --------------------------------------------------------------------\n\n    Module     : Articles\n    Controller : Article Controller\n\n    ---------------------------------------------------------------------\n\n    Description :\n    \n    Aditional information: All role routes are working with Guards, and Guards \n    are defining the current req.article value.\n\n    Middleware description: \n\n    Route:\n    /api/articles    \n   ----------------------------------------------------------------------*/\n\n  /* \n    Route:        GET api/articles\n    Roles:        user, admin\n    Description:  Get list of articles\n  */\n\n  @Get('')\n  @Roles('user', 'admin')\n  async list(@Req() req) {\n    const articles = await this.articlesService.list();\n  \treturn articles;\n  }\n\n  /* \n    Route:        Post api/articles\n    Roles:        user, admin\n    Description:  Create a new Article\n  */\n\n  @Post('')\n  @Roles('user', 'admin')\n  async create(@Req() req) {\n    let article = req.body;\n    article.creator = req.user._id;\n    await this.articlesService.create(article);\n    this.articlesSocket.sendCreatedArticle(article);\n    return article;\n  }\n\n  /* \n    Route:        GET api/articles/:articleId\n    Roles:        article, admin\n    Description:  Get article by provided Id.\n  */\n\n  @Get(':articleId')\n  @Roles('user', 'admin')\n  async getArticleById(@Req() req) {\n    let article = req.article;\n    return article;\n  }\n\n  /* \n    Route:        PUT api/articles/:articleId \n    Roles:        article, admin\n    Description:  Get article by provided Id.\n  */\n\n  @Put(':articleId')\n  @Roles('user', 'admin')\n  async updateArticleById(@Req() req) {\n    const article = req.article;\n    return await this.articlesService.update(article, req.body);\n  }\n\n  /* \n    Route:        DELETE api/articles/:articleId\n    Roles:        user, admin\n    Description:  Delete article provide by id.\n  */\n\n  @Patch(':articleId')\n  @Roles('user', 'admin')\n  async patchArticleById(@Req() req) {\n    const article = req.article;\n    return await this.articlesService.patch(article, req.body);\n  }\n\n  /* \n    Route:        DELETE api/articles/:articleId\n    Roles:        user, admin\n    Description:  Delete article provide by id.\n  */\n\n  @Delete(':articleId')\n  @Roles('user', 'admin')\n  async deleteArticle(@Req() req) {\n    const article = req.article;\n    return await this.articlesService.delete(article);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArticlesGateway.html":{"url":"classes/ArticlesGateway.html","title":"class - ArticlesGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArticlesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/articles/articles.gateway.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayInit\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                afterInit\n                            \n                            \n                                findAll\n                            \n                            \n                                sendArticlesListFromSocket\n                            \n                            \n                                sendCreatedArticle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/articles/articles.gateway.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @WebSocketServer()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/articles/articles.gateway.ts:14\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            afterInit\n                        \n                        \n                    \n                \n            \n            \n                \nafterInit()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.gateway.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll(client, data)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('articles')\n                \n            \n\n            \n                \n                    Defined in src/modules/articles/articles.gateway.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendArticlesListFromSocket\n                        \n                        \n                    \n                \n            \n            \n                \nsendArticlesListFromSocket(articles)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.gateway.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    articles\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendCreatedArticle\n                        \n                        \n                    \n                \n            \n            \n                \nsendCreatedArticle(article)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.gateway.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n  WsResponse,\n  OnGatewayInit\n} from '@nestjs/websockets';\nimport { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@WebSocketGateway()\n\nexport class ArticlesGateway implements OnGatewayInit {\n  @WebSocketServer() server;\n\n  constructor() {\n    console.log('initializing');\n  }\n\n  afterInit() {\n  }\n\n  sendArticlesListFromSocket(articles) {\n    return this.server.emit('articles', { message: 'from controller' });\n  }\n\n  sendCreatedArticle(article) {\n    return this.server.emit('articleChannel', { article });\n  }\n\n  /*\n   *  Explicación de proceso\n   *  1.- Creamos un socket llamado articles, el cual al ser llamado ejecutará una respuesta\n   */\n  @SubscribeMessage('articles')\n  findAll(client, data) {\n    return this.server.emit('articles', { message: 'works' });\n  }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArticlesModule.html":{"url":"modules/ArticlesModule.html","title":"module - ArticlesModule","body":"\n                   \n\n\n\n\n    Modules\n    ArticlesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ArticlesModule\n\n\n\ncluster_ArticlesModule_imports\n\n\n\ncluster_ArticlesModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nArticlesModule\n\nArticlesModule\n\nArticlesModule -->\n\nDatabaseModule->ArticlesModule\n\n\n\n\n\nArticlesService\n\nArticlesService\n\nArticlesModule -->\n\nArticlesService->ArticlesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/articles/articles.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ArticlesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ArticlesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.module.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, NestModule, MiddlewareConsumer, RequestMethod } from '@nestjs/common';\n\nimport { DatabaseModule } from '../../database';\nimport { ArticlesController } from './articles.controller';\nimport { articleProviders } from './articles.providers';\nimport { ArticlesService } from './articles.service';\n\nimport { ArticlesGateway } from './articles.gateway';\n\nimport { ArticleIdMiddleware } from './middlewares/articleById.middleware';\n//  Middlewares\nimport { articleValidatorMiddleware } from '../articles/middlewares/article-validator.middleware';\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [ArticlesController],\n  providers: [\n    ArticlesGateway,\n    ...articleProviders,\n    ArticlesService\n  ],\n  exports: [\n    ...articleProviders\n  ]\n})\nexport class ArticlesModule implements NestModule {\n  constructor() {\n  console.log('Articles module loaded');\n  }\n  public configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(articleValidatorMiddleware)\n      .forRoutes({ path: 'articles', method: RequestMethod.POST });\n\n    consumer.apply(ArticleIdMiddleware)\n      .forRoutes({ path: 'articles/:articleId', method: RequestMethod.ALL });\n      //  users id calling middleware for findById users before run another methods like \"delete/update/read\"\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ArticlesService.html":{"url":"injectables/ArticlesService.html","title":"injectable - ArticlesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ArticlesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/articles/articles.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                articleModel\n                            \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                params\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                list\n                            \n                            \n                                    Async\n                                patch\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/modules/articles/articles.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(article)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(article)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            list\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    list()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            patch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(article, body)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(article, body)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/articles.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    article\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            articleModel\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/modules/articles/articles.service.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            db\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/modules/articles/articles.service.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            params\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/modules/articles/articles.service.ts:18\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Inject, HttpException, HttpStatus, Scope } from '@nestjs/common';\nimport { Model, Connection } from 'mongoose';\n\nimport { ARTICLE_MODEL_TOKEN, SERVER_CONFIG, DB_CONNECTION_TOKEN } from '../../server.constants';\nimport { IArticle } from './interfaces/article.interface';\nimport { ArticleSchema } from './schemas/article.schema';\nimport { isEmptyObject } from '../../common/helpers/utils';\n\nimport { parseImageURL } from '../../common/helpers/converters';\nimport { getErrorMessage } from '../../common/helpers/error-handler';\n\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\n@Injectable()\nexport class ArticlesService {\n    private articleModel;\n    private params;\n    private db;\n    constructor(@Inject(REQUEST) private readonly request: Request) {\n        const db = request['dbConnection'];\n        this.articleModel = db.model(ARTICLE_MODEL_TOKEN, ArticleSchema) as Model;\n    }\n\n    async create(article) {\n        try {\n          return await this.articleModel.create(article);\n        } catch (ex) {\n          throw new HttpException(getErrorMessage(ex), HttpStatus.UNPROCESSABLE_ENTITY);\n        }\n    }\n\n    async list() {\n        try {\n          return await this.articleModel.find();\n        } catch (ex) {\n          throw new HttpException(getErrorMessage(ex), HttpStatus.UNPROCESSABLE_ENTITY);\n        }    \n    }\n\n    async update(article, body) {\n    \tarticle.title = body.title;\n    \tarticle.content = body.content;\n        try {\n          return await article.save();\n        } catch (ex) {\n          throw new HttpException(getErrorMessage(ex), HttpStatus.UNPROCESSABLE_ENTITY);\n        }  \n    }\n\n    async patch(article, body) {\n        try {\n          return await article.updateAttributes(body);\n        } catch (ex) {\n          throw new HttpException(getErrorMessage(ex), HttpStatus.UNPROCESSABLE_ENTITY);\n        }     \n    }\n\n    async delete(article) {\n        try {\n          return await article.remove();\n        } catch (ex) {\n          throw new HttpException(getErrorMessage(ex), HttpStatus.UNPROCESSABLE_ENTITY);\n        }      \n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                facebookSignIn\n                            \n                            \n                                    Async\n                                googleSignIn\n                            \n                            \n                                    Async\n                                requestFacebookRedirectUrl\n                            \n                            \n                                    Async\n                                requestGoogleRedirectUri\n                            \n                            \n                                    Async\n                                requestJsonWebTokenAfterFacebookSignIn\n                            \n                            \n                                    Async\n                                requestJsonWebTokenAfterGoogleSignIn\n                            \n                            \n                                    Async\n                                requestJsonWebTokenAfterLocalSignIn\n                            \n                            \n                                    Async\n                                requestJsonWebTokenAfterLocalSignUp\n                            \n                            \n                                    Async\n                                requestJsonWebTokenAfterTwitterSignIn\n                            \n                            \n                                    Async\n                                requestTwitterRedirectUri\n                            \n                            \n                                    Async\n                                twitterSignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            facebookSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookSignIn(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('facebook/signin')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleSignIn(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('google/signin')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestFacebookRedirectUrl\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestFacebookRedirectUrl()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('facebook/uri')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestGoogleRedirectUri\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestGoogleRedirectUri()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/uri')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestJsonWebTokenAfterFacebookSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestJsonWebTokenAfterFacebookSignIn(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('facebook/token')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestJsonWebTokenAfterGoogleSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestJsonWebTokenAfterGoogleSignIn(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('google/token')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestJsonWebTokenAfterLocalSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestJsonWebTokenAfterLocalSignIn(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('local/signin')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestJsonWebTokenAfterLocalSignUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestJsonWebTokenAfterLocalSignUp(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('local/signup')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestJsonWebTokenAfterTwitterSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestJsonWebTokenAfterTwitterSignIn(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('twitter/token')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestTwitterRedirectUri\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestTwitterRedirectUri()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('twitter/uri')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            twitterSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    twitterSignIn(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('twitter/signin')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Get, Req, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Request } from 'express';\n\nimport { AuthService } from './auth.service';\nimport { IToken } from './interfaces/token.interface';\nimport { RolesGuard } from '../../guards/roles.guard';\nimport { Roles } from '../../decorators/roles.decorator';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('local/signup')\n  async requestJsonWebTokenAfterLocalSignUp(@Req() req: Request): Promise {\n    return await this.authService.createUserAndReturnToken(req.body);\n  }\n\n  @Post('local/signin')\n  async requestJsonWebTokenAfterLocalSignIn(@Req() req: Request): Promise {\n    return await this.authService.createToken(req.user);\n  }\n\n  @Get('facebook/uri')\n  async requestFacebookRedirectUrl(): Promise {\n    return await this.authService.requestFacebookRedirectUri();\n  }\n\n  @Post('facebook/signin')\n  async facebookSignIn(@Req() req: Request): Promise {\n    return await this.authService.facebookSignIn(req.body.code);\n  }\n\n  @Post('facebook/token')\n  async requestJsonWebTokenAfterFacebookSignIn(@Req() req: Request): Promise {\n    return await this.authService.createToken(req.user);\n  }\n\n  @Get('twitter/uri')\n  async requestTwitterRedirectUri(): Promise {\n    return await this.authService.requestTwitterRedirectUri();\n  }\n\n  @Post('twitter/signin')\n  async twitterSignIn(@Req() req: Request): Promise {\n    return await this.authService.twitterSignIn(req.body.oauth_token, req.body.oauth_verifier);\n  }\n\n  @Post('twitter/token')\n  async requestJsonWebTokenAfterTwitterSignIn(@Req() req: Request): Promise {\n    return await this.authService.createToken(req.user);\n  }\n\n  @Get('google/uri')\n  async requestGoogleRedirectUri(): Promise {\n    return await this.authService.requestGoogleRedirectUri();\n  }\n\n  @Post('google/signin')\n  async googleSignIn(@Req() req: Request): Promise {\n    return await this.authService.googleSignIn(req.body.code);\n  }\n\n  @Post('google/token')\n  async requestJsonWebTokenAfterGoogleSignIn(@Req() req: Request): Promise {\n    return await this.authService.createToken(req.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nAuthModule -->\n\nFacebookStrategy->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTwitterStrategy\n\nTwitterStrategy\n\nAuthModule -->\n\nTwitterStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            FacebookStrategy\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            TwitterStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.module.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  Module,\n  NestModule,\n  MiddlewareConsumer,\n  RequestMethod,\n} from '@nestjs/common';\nimport { authenticate } from 'passport';\n\n// Strategies\nimport { LocalStrategy } from './passport/local.strategy';\nimport { JwtStrategy } from './passport/jwt.strategy';\nimport { FacebookStrategy } from './passport/facebook.strategy';\nimport { TwitterStrategy } from './passport/twitter.strategy';\nimport { GoogleStrategy } from './passport/google-plus.strategy';\n\nimport { UsersModule } from '../users/users.module';\nimport { authProviders } from './auth.providers';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { bodyValidatorMiddleware } from './middlewares/body-validator.middleware';\nimport { Verifier } from './passport/verifier';\n\n@Module({\n  imports: [UsersModule],\n  providers: [\n    ...authProviders,\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n    FacebookStrategy,\n    TwitterStrategy,\n    GoogleStrategy\n  ],\n  controllers: [AuthController]\n})\nexport class AuthModule implements NestModule {\n  constructor() {\n    // code...\n    console.log('Auth Module loaded');\n  }\n  public configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(bodyValidatorMiddleware)\n      .forRoutes('auth/local/signup');\n    consumer\n      .apply(authenticate('local-signin', { session: false }))\n      .forRoutes('auth/local/signin');\n\n    consumer\n      .apply(authenticate('facebook', { session: false }))\n      .forRoutes('auth/facebook/token');\n\n    consumer\n      .apply(authenticate('twitter', { session: false }))\n      .forRoutes('auth/twitter/token');\n\n    consumer\n      .apply(authenticate('google', { session: false }))\n      .forRoutes('auth/google/token');\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                params\n                            \n                            \n                                    Private\n                                url\n                            \n                            \n                                    Private\n                                userModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createToken\n                            \n                            \n                                    Async\n                                createUserAndReturnToken\n                            \n                            \n                                    Async\n                                facebookSignIn\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                googleSignIn\n                            \n                            \n                                    Private\n                                parseTwitterResponse\n                            \n                            \n                                    Async\n                                requestFacebookRedirectUri\n                            \n                            \n                                    Async\n                                requestGoogleRedirectUri\n                            \n                            \n                                    Async\n                                requestTwitterRedirectUri\n                            \n                            \n                                    Async\n                                twitterSignIn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fbConfig: IFacebookConfig, twitterConfig: ITwitterConfig, googleConfig: IGoogleConfig, request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fbConfig\n                                                  \n                                                        \n                                                                        IFacebookConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        twitterConfig\n                                                  \n                                                        \n                                                                        ITwitterConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        googleConfig\n                                                  \n                                                        \n                                                                        IGoogleConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createToken(user: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUserAndReturnToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUserAndReturnToken(user: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            facebookSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    facebookSignIn(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleSignIn(code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:237\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            parseTwitterResponse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    parseTwitterResponse(response: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:285\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestFacebookRedirectUri\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestFacebookRedirectUri()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestGoogleRedirectUri\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestGoogleRedirectUri()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:223\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            requestTwitterRedirectUri\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    requestTwitterRedirectUri()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            twitterSignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    twitterSignIn(oauth_token: string, oauth_verifier: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:177\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    oauth_token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    oauth_verifier\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            params\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/modules/auth/auth.service.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/auth/auth.service.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            userModel\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/modules/auth/auth.service.ts:29\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Inject, HttpException, HttpStatus } from '@nestjs/common';\nimport { Model, Connection } from 'mongoose';\nimport { sign } from 'jsonwebtoken';\nimport { get, post, Response } from 'request';\n\nimport { getErrorMessage } from '../../common/helpers/error-handler';\n\nimport {\n  SERVER_CONFIG,\n  USER_MODEL_TOKEN,\n  FACEBOOK_CONFIG_TOKEN,\n  TWITTER_CONFIG_TOKEN,\n  GOOGLE_CONFIG_TOKEN\n} from '../../server.constants';\nimport { IUser } from '../users/interfaces/user.interface';\nimport { IToken } from './interfaces/token.interface';\nimport { IFacebookConfig } from './interfaces/facebook-config.interface';\nimport { ITwitterConfig } from './interfaces/twitter-config.interface';\nimport { IGoogleConfig } from './interfaces/google-config.interface';\nimport { generateHashedPassword, generateSalt } from '../../utilities/encryption';\n\nimport { UserSchema } from '../users/schemas/user.schema';\n\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\n@Injectable()\nexport class AuthService {\n  private userModel;\n  private url: string;\n  private params;\n  constructor(\n    @Inject(FACEBOOK_CONFIG_TOKEN) private readonly fbConfig: IFacebookConfig,\n    @Inject(TWITTER_CONFIG_TOKEN) private readonly twitterConfig: ITwitterConfig,\n    @Inject(GOOGLE_CONFIG_TOKEN) private readonly googleConfig: IGoogleConfig,\n    @Inject(REQUEST) private readonly request: Request\n  ) {\n    const db = request['dbConnection'];\n    this.userModel = db.model(USER_MODEL_TOKEN, UserSchema) as Model;\n    this.url = `${SERVER_CONFIG.httpProtocol}://${SERVER_CONFIG.domain}:${SERVER_CONFIG.httpPort}`;\n  }\n\n  async createUserAndReturnToken(user: IUser): Promise {\n    const expiresIn = '48h';\n    const salt: string = generateSalt();\n    const newUser: IUser = new this.userModel({\n      firstName: user.firstName,\n      lastName: user.lastName,\n      displayName: `${user.firstName} ${user.lastName}`,\n      email: user.email,\n      username: user.username,\n      password: generateHashedPassword(salt, user.password),\n      salt,\n      provider: 'local',\n      providerData: null,\n      additionalProvidersData: null,\n      roles: user.roles || 'user'\n    });\n\n    try {\n      await newUser.save();\n      const token = sign({\n        _id: newUser._id\n      }, SERVER_CONFIG.jwtSecret, {\n        expiresIn\n      });\n\n      return  { \n        token \n      };\n    } catch (ex) {\n      throw new HttpException(getErrorMessage(ex), HttpStatus.UNPROCESSABLE_ENTITY);\n    }\n  }\n\n  async createToken(user: IUser): Promise {\n    const expiresIn: string = '48h';\n    const token: string = sign({\n      _id: user.id\n    }, SERVER_CONFIG.jwtSecret, {expiresIn});\n\n    return {\n      token\n    };\n  }\n\n  async findUserById(id: string): Promise {\n    return await this.userModel.findById(id);\n  }\n\n  async requestFacebookRedirectUri(): Promise {\n    const queryParams: string[] = [\n      `client_id=${this.fbConfig.client_id}`,\n      `redirect_uri=${this.fbConfig.oauth_redirect_uri}`,\n      `state=${this.fbConfig.state}`\n    ];\n    const redirect_uri: string = `${this.fbConfig.login_dialog_uri}?${queryParams.join('&')}`;\n\n    return {\n      redirect_uri\n    };\n  }\n\n  async facebookSignIn(code: string): Promise {\n    console.log('Llego aqui');\n    const queryParams: string[] = [\n      `client_id=${this.fbConfig.client_id}`,\n      `redirect_uri=${this.fbConfig.oauth_redirect_uri}`,\n      `client_secret=${this.fbConfig.client_secret}`,\n      `code=${code}`\n    ];\n\n    const uri: string = `${this.fbConfig.access_token_uri}?${queryParams.join('&')}`;\n\n    return new Promise((resolve: Function, reject: Function) => {\n      get(uri, (error: Error, response: Response, body: any) => {\n        if (error) {\n          return reject(error);\n        }\n\n        if (body.error) {\n          return reject(body.error);\n        }\n\n        const { access_token } = JSON.parse(body);\n\n        post({\n          url: `${this.url}/api/auth/facebook/token`,\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          form: {\n            access_token\n          }\n        }, async (err: Error, res: Response, body: any) => {\n          if (err) {\n            return reject(err);\n          }\n\n          if (body.error) {\n            return reject(body.error);\n          }\n          resolve(body);\n        });\n      });\n    });\n  }\n\n  async requestTwitterRedirectUri(): Promise {\n    return new Promise((resolve: Function, reject: Function) => {\n      post({\n        url: this.twitterConfig.request_token_uri,\n        oauth: {\n          consumer_key: this.twitterConfig.consumer_key,\n          consumer_secret: this.twitterConfig.consumer_secret,\n          callback: this.twitterConfig.oauth_redirect_uri\n        },\n      }, async (err: Error, res: Response, body: any) => {\n        if (err) {\n          return reject(err);\n        }\n\n        if (body.error) {\n          return reject(body.error);\n        }\n\n        const { oauth_token } = this.parseTwitterResponse(body);\n        const redirect_uri: string = `${this.twitterConfig.login_dialog_uri}?oauth_token=${oauth_token}`;\n\n        resolve({\n          redirect_uri\n        });\n      });\n    });\n  }\n\n  async twitterSignIn(oauth_token: string, oauth_verifier: string): Promise {\n    return new Promise((resolve: Function, reject: Function) => {\n      post({\n        url: this.twitterConfig.access_token_uri,\n        oauth: {\n          consumer_key: this.twitterConfig.consumer_key,\n          consumer_secret: this.twitterConfig.consumer_secret,\n          token: oauth_token,\n          verifier: oauth_verifier\n        }\n      }, async (err: Error, res: Response, body: any) => {\n        if (err) {\n          return reject(err);\n        }\n\n        if (body.error) {\n          return reject(body.error);\n        }\n\n        const { oauth_token, oauth_token_secret, user_id } = this.parseTwitterResponse(body);\n\n        post({\n          url: `${this.url}/api/auth/twitter/token`,\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          form: {\n            oauth_token,\n            oauth_token_secret,\n            user_id\n          }\n        }, async (err: Error, res: Response, body: any) => {\n          if (err) {\n            return reject(err);\n          }\n\n          if (body.error) {\n            return reject(body.error);\n          }\n\n          resolve(body);\n        });\n      });\n    });\n  }\n\n  async requestGoogleRedirectUri(): Promise {\n    const queryParams: string[] = [\n      `client_id=${this.googleConfig.client_id}`,\n      `redirect_uri=${this.googleConfig.oauth_redirect_uri}`,\n      `response_type=${this.googleConfig.response_type}`,\n      `scope=${this.googleConfig.scopes.join(' ')}`\n    ];\n    const redirect_uri: string = `${this.googleConfig.login_dialog_uri}?${queryParams.join('&')}`;\n\n    return {\n      redirect_uri\n    };\n  }\n\n  async googleSignIn(code: string): Promise {\n    return new Promise((resolve: Function, reject: Function) => {\n      post({\n        url: this.googleConfig.access_token_uri,\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        form: {\n          code,\n          client_id: this.googleConfig.client_id,\n          client_secret: this.googleConfig.client_secret,\n          redirect_uri: this.googleConfig.oauth_redirect_uri,\n          grant_type: this.googleConfig.grant_type\n        }\n      }, async (err: Error, res: Response, body: any) => {\n        if (err) {\n          return reject(err);\n        }\n\n        if (body.error) {\n          return reject(body.error);\n        }\n\n        const { access_token } = JSON.parse(body);\n\n        post({\n          url: `${this.url}/api/auth/google/token`,\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          },\n          form: {\n            access_token\n          }\n        }, async (err: Error, res: Response, body: any) => {\n          if (err) {\n            return reject(err);\n          }\n\n          if (body.error) {\n            return reject(body.error);\n          }\n\n          resolve(body);\n        });\n      });\n    });\n  }\n\n  private parseTwitterResponse(response: string): {[key: string]: string | boolean} {\n    const regex: RegExp = /([a-z_]+?)=([a-zA-Z0-9_-]+)/g;\n    const parsedResponse: {[key: string]: string} = {};\n\n    let match: RegExpMatchArray = regex.exec(response);\n\n    while (match) {\n      match.shift();\n\n      parsedResponse[match.shift()] = match.shift();\n\n      match = regex.exec(response);\n    }\n\n    return parsedResponse;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { databaseProviders } from './database.providers';\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DoStuff.html":{"url":"classes/DoStuff.html","title":"class - DoStuff","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DoStuff\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/helpers/class.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/helpers/class.ts:7\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable, Inject, HttpException, HttpStatus, Scope } from '@nestjs/common';\nimport { Model } from 'mongoose';\n\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\nexport class DoStuff {\n    constructor() {\n    \tconsole.log('do stuff called');\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EnvironmentService.html":{"url":"classes/EnvironmentService.html","title":"class - EnvironmentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvironmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/environment.variables.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                envConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filePath: string)\n                    \n                \n                        \n                            \n                                Defined in src/environment.variables.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/environment.variables.ts:5\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/environment.variables.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { parse } from 'dotenv';\nimport { readFileSync } from 'fs';\n\nexport class EnvironmentService {\n  private readonly envConfig: { [prop: string]: string };\n\n  constructor(filePath: string) {\n    this.envConfig = parse(readFileSync(filePath))\n  }\n\n  get(key: string): string {\n    return this.envConfig[key];\n  }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FacebookStrategy.html":{"url":"injectables/FacebookStrategy.html","title":"injectable - FacebookStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FacebookStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/passport/facebook.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                userModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(fbConfig: IFacebookConfig)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/passport/facebook.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fbConfig\n                                                  \n                                                        \n                                                                        IFacebookConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/passport/facebook.strategy.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            userModel\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/modules/auth/passport/facebook.strategy.ts:17\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { Model, Connection } from 'mongoose';\nimport { use } from 'passport';\n\nimport { FACEBOOK_CONFIG_TOKEN, DB_CONNECTION_TOKEN, USER_MODEL_TOKEN } from '../../../server.constants';\nimport { IFacebookConfig } from '../interfaces/facebook-config.interface';\n\nimport { IUser } from '../../users/interfaces/user.interface';\nimport { UserSchema } from '../../users/schemas/user.schema';\n\nimport { Request } from 'express';\n\nconst FacebookTokenStrategy = require('passport-facebook-token');\n\n@Injectable()\nexport class FacebookStrategy {\n  private userModel;\n  constructor(@Inject(FACEBOOK_CONFIG_TOKEN) private readonly fbConfig: IFacebookConfig) {\n    this.init();\n  }\n\n  private init(): void {\n    use('facebook', new FacebookTokenStrategy({\n      passReqToCallback: true,\n      clientID: this.fbConfig.client_id,\n      clientSecret: this.fbConfig.client_secret,\n      profileFields: ['id', 'name', 'displayName', 'emails', 'photos']\n    }, async (req: Request, accessToken: string, refreshToken: string, profile: any, done: Function) => {\n      try {\n        const db = req['dbConnection'];\n        this.userModel = db.model(USER_MODEL_TOKEN, UserSchema) as Model;\n        var providerData = profile._json;\n        providerData.accessToken = accessToken;\n        providerData.refreshToken = refreshToken;\n\n        let email: string = profile.emails.shift().value;\n\n        //  Conditional if facebook doesn't return email\n        if (!email || email === '') email = `${profile.id}@${profile.provider}.com`;\n\n        const existingUser: IUser = await this.userModel.findOne({ email: email });\n\n        if (existingUser) {\n          return done(null, existingUser);\n        }\n  \n        var providerUserProfile = {\n          firstName: profile.name.givenName,\n          lastName: profile.name.familyName,\n          displayName: profile.displayName,\n          email: email,\n          username: profile.username || `${profile.id}`,\n          profileImageURL: (profile.id) ? '//graph.facebook.com/' + profile.id + '/picture?type=large' : undefined,\n          provider: 'facebook',\n          providerIdentifierField: 'id',\n          providerData: providerData\n        };\n\n        const user = new this.userModel(providerUserProfile);\n        \n        done(null, await user.save());\n      } catch (err) {\n        done(err, null);\n      }\n\n      function generateUsername(profile) {\n        var username = '';\n\n        if (profile.emails) {\n          username = profile.emails[0].value.split('@')[0];\n        } else if (profile.name) {\n          username = profile.name.givenName[0] + profile.name.familyName;\n        }\n\n        return username.toLowerCase() || undefined;\n      }\n    }));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/passport/google-plus.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                userModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(googleConfig: IGoogleConfig)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/passport/google-plus.strategy.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        googleConfig\n                                                  \n                                                        \n                                                                        IGoogleConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/passport/google-plus.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            userModel\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/modules/auth/passport/google-plus.strategy.ts:16\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { Model, Connection } from 'mongoose';\nimport { use } from 'passport';\nimport { v1 } from 'uuid';\n\nimport { GOOGLE_CONFIG_TOKEN, USER_MODEL_TOKEN, DB_CONNECTION_TOKEN } from '../../../server.constants';\nimport { IGoogleConfig } from '../interfaces/google-config.interface';\nimport { IUser } from '../../users/interfaces/user.interface';\nimport { UserSchema } from '../../users/schemas/user.schema';\n\nimport { Request } from 'express';\nconst GoogleTokenStrategy = require('passport-google-plus-token');\n\n@Injectable()\nexport class GoogleStrategy {\n  private userModel;\n  constructor(@Inject(GOOGLE_CONFIG_TOKEN) private readonly googleConfig: IGoogleConfig) {\n    this.init();\n  }\n\n  private init(): void {\n    use('google', new GoogleTokenStrategy({\n      passReqToCallback: true,\n      clientID: this.googleConfig.client_id,\n      clientSecret: this.googleConfig.client_secret\n    }, async (req: Request, accessToken: string, refreshToken: string, profile: any, done: Function) => {\n\n      try {\n        // Set the provider data and include tokens\n        const db = req['dbConnection'];\n        this.userModel = db.model(USER_MODEL_TOKEN, UserSchema) as Model;\n        var providerData = profile._json;\n        providerData.accessToken = accessToken;\n        providerData.refreshToken = refreshToken;\n        const existingUser = await this.userModel.findOne({ email: profile.emails[0].value });\n\n        if (existingUser) {\n          return done(null, existingUser);\n        }\n        // Create the user OAuth profile\n        var providerUserProfile = {\n          firstName: profile.name.givenName,\n          lastName: profile.name.familyName,\n          displayName: profile.displayName,\n          email: profile.emails[0].value,\n          username: profile.username,\n          profileImageURL: (providerData.picture) ? providerData.picture : providerData.image.url,\n          provider: 'google',\n          providerIdentifierField: 'id',\n          providerData: providerData\n        };\n        if (!providerUserProfile.username) providerUserProfile.username = v1();\n        const user = new this.userModel(providerUserProfile);\n        done(null, await user.save());\n      } catch (ex) {\n        done(ex, null);\n      }\n    }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IArticle.html":{"url":"interfaces/IArticle.html","title":"interface - IArticle","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IArticle\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/articles/interfaces/article.interface.ts\n        \n\n            \n                Description\n            \n            \n                Declaring the Interface Article\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        content\n                                \n                                \n                                        created\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        created\n                                    \n                                \n                                \n                                    \n                                        created:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\n\n/**\n *  Declaring the Interface Article\n */\nexport interface IArticle extends Document {\n  created: Date;\n  title: string;\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IConfig.html":{"url":"interfaces/IConfig.html","title":"interface - IConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.ts\n        \n\n            \n                Description\n            \n            \n                Creamos una interface \"IConfig\", la cual contendrá a IEnvironmentConfig\nEstos objetos tipados implementan la interfaz IEnvironmentConfig con los\nEntornos de desarrollo y produccion (según se implemente);\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        development\n                                \n                                \n                                        production\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        IEnvironmentConfig\n\n                    \n                \n                        \n                            \n                                Defined in src/config/config.ts:28\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        development\n                                    \n                                \n                                \n                                    \n                                        development:         IEnvironmentConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IEnvironmentConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        production\n                                    \n                                \n                                \n                                    \n                                        production:         IEnvironmentConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IEnvironmentConfig\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EnvironmentService } from '../environment.variables';\nimport { extractKey } from '../utilities/keys';\n\nlet environmentService = new EnvironmentService('.env');\n/**\n *  Creamos la interface IEnvironmentConfig la cual obtendrá todas \n *  las propiedades de nuestro entorno de trabajo.\n */\ninterface IEnvironmentConfig {\n  rootPath: string;\n  dbs: any;\n  db_uri: string;\n  httpPort: number;\n  wsPort: number;\n  jwtSecret: string;\n  domain: string;\n  httpProtocol: string;\n  wsProtocol: string;\n  awsKey: string;\n  awsSecret: string;\n}\n\n/**\n *  Creamos una interface \"IConfig\", la cual contendrá a IEnvironmentConfig\n *  Estos objetos tipados implementan la interfaz IEnvironmentConfig con los\n *  Entornos de desarrollo y produccion (según se implemente);\n */\ninterface IConfig {\n  [key: string]: IEnvironmentConfig;\n  development: IEnvironmentConfig;\n  production: IEnvironmentConfig;\n}\n\n/**\n *  Seteamos la variable rootPath, para saber la ruta en la cual se encuentra el servidor.\n */\nconst rootPath = process.cwd();\n\n/**\n *  En la constante jwtSecret asignamos la llave creada en /keys/jwt.private.key\n */\nconst jwtSecret = extractKey(`${rootPath}/keys/jwt.private.key`);\n\n/**\n *  Definimos los valores para local y produccion\n */\nconst Config: IConfig = {\n  development: {\n    rootPath,\n    db_uri: 'mongodb://localhost:27017/default',\n    dbs: environmentService.get('DBS'),\n    httpPort: 1337,\n    wsPort: 1338,\n    jwtSecret,\n    domain: 'localhost',\n    httpProtocol: 'http',\n    wsProtocol: 'ws',\n    awsKey: environmentService.get('AWS_KEY'),\n    awsSecret: environmentService.get('AWS_SECRET')\n  },\n  production: {\n    rootPath,\n    db_uri: 'mongodb://localhost:27017/default',   \n    dbs: environmentService.get('DBS'), \n    httpPort: + environmentService.get('HTTP_SERVER_PORT'),\n    wsPort: + environmentService.get('WS_PORT'),\n    jwtSecret,\n    domain: environmentService.get('DOMAIN'),\n    httpProtocol: environmentService.get('HTTP_PROTOCOL'),\n    wsProtocol: environmentService.get('WS_PROTOCOL'),\n    awsKey: environmentService.get('AWS_KEY'),\n    awsSecret: environmentService.get('AWS_SECRET')\n  }\n};\n\nexport {\n  IEnvironmentConfig,\n  IConfig,\n  Config\n};\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IEnvironmentConfig.html":{"url":"interfaces/IEnvironmentConfig.html","title":"interface - IEnvironmentConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IEnvironmentConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.ts\n        \n\n            \n                Description\n            \n            \n                Creamos la interface IEnvironmentConfig la cual obtendrá todas \nlas propiedades de nuestro entorno de trabajo.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        awsKey\n                                \n                                \n                                        awsSecret\n                                \n                                \n                                        db_uri\n                                \n                                \n                                        dbs\n                                \n                                \n                                        domain\n                                \n                                \n                                        httpPort\n                                \n                                \n                                        httpProtocol\n                                \n                                \n                                        jwtSecret\n                                \n                                \n                                        rootPath\n                                \n                                \n                                        wsPort\n                                \n                                \n                                        wsProtocol\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        awsKey\n                                    \n                                \n                                \n                                    \n                                        awsKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        awsSecret\n                                    \n                                \n                                \n                                    \n                                        awsSecret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        db_uri\n                                    \n                                \n                                \n                                    \n                                        db_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dbs\n                                    \n                                \n                                \n                                    \n                                        dbs:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        domain\n                                    \n                                \n                                \n                                    \n                                        domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        httpPort\n                                    \n                                \n                                \n                                    \n                                        httpPort:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        httpProtocol\n                                    \n                                \n                                \n                                    \n                                        httpProtocol:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwtSecret\n                                    \n                                \n                                \n                                    \n                                        jwtSecret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rootPath\n                                    \n                                \n                                \n                                    \n                                        rootPath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wsPort\n                                    \n                                \n                                \n                                    \n                                        wsPort:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wsProtocol\n                                    \n                                \n                                \n                                    \n                                        wsProtocol:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EnvironmentService } from '../environment.variables';\nimport { extractKey } from '../utilities/keys';\n\nlet environmentService = new EnvironmentService('.env');\n/**\n *  Creamos la interface IEnvironmentConfig la cual obtendrá todas \n *  las propiedades de nuestro entorno de trabajo.\n */\ninterface IEnvironmentConfig {\n  rootPath: string;\n  dbs: any;\n  db_uri: string;\n  httpPort: number;\n  wsPort: number;\n  jwtSecret: string;\n  domain: string;\n  httpProtocol: string;\n  wsProtocol: string;\n  awsKey: string;\n  awsSecret: string;\n}\n\n/**\n *  Creamos una interface \"IConfig\", la cual contendrá a IEnvironmentConfig\n *  Estos objetos tipados implementan la interfaz IEnvironmentConfig con los\n *  Entornos de desarrollo y produccion (según se implemente);\n */\ninterface IConfig {\n  [key: string]: IEnvironmentConfig;\n  development: IEnvironmentConfig;\n  production: IEnvironmentConfig;\n}\n\n/**\n *  Seteamos la variable rootPath, para saber la ruta en la cual se encuentra el servidor.\n */\nconst rootPath = process.cwd();\n\n/**\n *  En la constante jwtSecret asignamos la llave creada en /keys/jwt.private.key\n */\nconst jwtSecret = extractKey(`${rootPath}/keys/jwt.private.key`);\n\n/**\n *  Definimos los valores para local y produccion\n */\nconst Config: IConfig = {\n  development: {\n    rootPath,\n    db_uri: 'mongodb://localhost:27017/default',\n    dbs: environmentService.get('DBS'),\n    httpPort: 1337,\n    wsPort: 1338,\n    jwtSecret,\n    domain: 'localhost',\n    httpProtocol: 'http',\n    wsProtocol: 'ws',\n    awsKey: environmentService.get('AWS_KEY'),\n    awsSecret: environmentService.get('AWS_SECRET')\n  },\n  production: {\n    rootPath,\n    db_uri: 'mongodb://localhost:27017/default',   \n    dbs: environmentService.get('DBS'), \n    httpPort: + environmentService.get('HTTP_SERVER_PORT'),\n    wsPort: + environmentService.get('WS_PORT'),\n    jwtSecret,\n    domain: environmentService.get('DOMAIN'),\n    httpProtocol: environmentService.get('HTTP_PROTOCOL'),\n    wsProtocol: environmentService.get('WS_PROTOCOL'),\n    awsKey: environmentService.get('AWS_KEY'),\n    awsSecret: environmentService.get('AWS_SECRET')\n  }\n};\n\nexport {\n  IEnvironmentConfig,\n  IConfig,\n  Config\n};\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFacebookConfig.html":{"url":"interfaces/IFacebookConfig.html","title":"interface - IFacebookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IFacebookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/facebook-config.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        access_token_uri\n                                \n                                \n                                        client_id\n                                \n                                \n                                        client_secret\n                                \n                                \n                                        login_dialog_uri\n                                \n                                \n                                        oauth_redirect_uri\n                                \n                                \n                                        state\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token_uri\n                                    \n                                \n                                \n                                    \n                                        access_token_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_id\n                                    \n                                \n                                \n                                    \n                                        client_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_secret\n                                    \n                                \n                                \n                                    \n                                        client_secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login_dialog_uri\n                                    \n                                \n                                \n                                    \n                                        login_dialog_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oauth_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        oauth_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IFacebookConfig {\n  readonly login_dialog_uri: string;\n  readonly access_token_uri: string;\n  readonly client_id: string;\n  readonly client_secret: string;\n  readonly oauth_redirect_uri: string;\n  readonly state: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IGoogleConfig.html":{"url":"interfaces/IGoogleConfig.html","title":"interface - IGoogleConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IGoogleConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/google-config.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        access_token_uri\n                                \n                                \n                                        client_id\n                                \n                                \n                                        client_secret\n                                \n                                \n                                        grant_type\n                                \n                                \n                                        login_dialog_uri\n                                \n                                \n                                        oauth_redirect_uri\n                                \n                                \n                                        response_type\n                                \n                                \n                                        scopes\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token_uri\n                                    \n                                \n                                \n                                    \n                                        access_token_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_id\n                                    \n                                \n                                \n                                    \n                                        client_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        client_secret\n                                    \n                                \n                                \n                                    \n                                        client_secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grant_type\n                                    \n                                \n                                \n                                    \n                                        grant_type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login_dialog_uri\n                                    \n                                \n                                \n                                    \n                                        login_dialog_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oauth_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        oauth_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response_type\n                                    \n                                \n                                \n                                    \n                                        response_type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scopes\n                                    \n                                \n                                \n                                    \n                                        scopes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IGoogleConfig {\n  readonly login_dialog_uri: string;\n  readonly client_id: string;\n  readonly client_secret: string;\n  readonly oauth_redirect_uri: string;\n  readonly access_token_uri: string;\n  readonly response_type: string;\n  readonly scopes: string[];\n  readonly grant_type: string;\n};\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IJwtPayload.html":{"url":"interfaces/IJwtPayload.html","title":"interface - IJwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IJwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        exp\n                                \n                                \n                                        iat\n                                \n                                \n                                        sub\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IJwtPayload {\n  readonly sub: string;\n  readonly iat: number;\n  readonly exp: number;\n};\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IToken.html":{"url":"interfaces/IToken.html","title":"interface - IToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/token.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IToken {\n  readonly token: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITwitterConfig.html":{"url":"interfaces/ITwitterConfig.html","title":"interface - ITwitterConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITwitterConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/interfaces/twitter-config.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        access_token_uri\n                                \n                                \n                                        consumer_key\n                                \n                                \n                                        consumer_secret\n                                \n                                \n                                        login_dialog_uri\n                                \n                                \n                                        oauth_redirect_uri\n                                \n                                \n                                        request_token_uri\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        access_token_uri\n                                    \n                                \n                                \n                                    \n                                        access_token_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        consumer_key\n                                    \n                                \n                                \n                                    \n                                        consumer_key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        consumer_secret\n                                    \n                                \n                                \n                                    \n                                        consumer_secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login_dialog_uri\n                                    \n                                \n                                \n                                    \n                                        login_dialog_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oauth_redirect_uri\n                                    \n                                \n                                \n                                    \n                                        oauth_redirect_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        request_token_uri\n                                    \n                                \n                                \n                                    \n                                        request_token_uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ITwitterConfig {\n  readonly consumer_key: string;\n  readonly consumer_secret: string;\n  readonly request_token_uri: string;\n  readonly login_dialog_uri: string;\n  readonly access_token_uri: string;\n  readonly oauth_redirect_uri: string;\n};\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/interfaces/user.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        active\n                                \n                                \n                                        additionalProvidersData\n                                \n                                \n                                        created\n                                \n                                \n                                        displayName\n                                \n                                \n                                        email\n                                \n                                \n                                        firstName\n                                \n                                \n                                        lastName\n                                \n                                \n                                        password\n                                \n                                \n                                        profileImageURL\n                                \n                                \n                                        provider\n                                \n                                \n                                        providerData\n                                \n                                \n                                        resetPasswordExpires\n                                \n                                \n                                        resetPasswordToken\n                                \n                                \n                                        roles\n                                \n                                \n                                        salt\n                                \n                                \n                                        updated\n                                \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        additionalProvidersData\n                                    \n                                \n                                \n                                    \n                                        additionalProvidersData:         object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         object\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        created\n                                    \n                                \n                                \n                                    \n                                        created:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        profileImageURL\n                                    \n                                \n                                \n                                    \n                                        profileImageURL:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        providerData\n                                    \n                                \n                                \n                                    \n                                        providerData:         object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         object\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resetPasswordExpires\n                                    \n                                \n                                \n                                    \n                                        resetPasswordExpires:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resetPasswordToken\n                                    \n                                \n                                \n                                    \n                                        resetPasswordToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        salt\n                                    \n                                \n                                \n                                    \n                                        salt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updated\n                                    \n                                \n                                \n                                    \n                                        updated:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\n\nexport interface IUser extends Document {\n  created: Date;\n  firstName: string;\n  lastName: string;\n  displayName: string;\n  email: string;\n  username: string;\n  active: boolean;\n  password: string;\n  profileImageURL: string;\n  salt: string;\n  provider: string;\n  providerData: object;\n  additionalProvidersData: object;\n  roles: string[];\n  updated: Date;\n  resetPasswordToken: string;\n  resetPasswordExpires: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IoConnector.html":{"url":"classes/IoConnector.html","title":"class - IoConnector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IoConnector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utilities/io-connector/io.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url, message)\n                    \n                \n                        \n                            \n                                Defined in src/utilities/io-connector/io.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        message\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendMessage\n                        \n                        \n                    \n                \n            \n            \n                \nsendMessage()\n                \n            \n\n\n            \n                \n                    Defined in src/utilities/io-connector/io.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Inject, HttpException, HttpStatus } from '@nestjs/common';\nimport * as socketIo from 'socket.io-client';\n\nexport class IoConnector {\n  constructor(private readonly url, private readonly message) {\n  }\n\n  sendMessage() {\n    const socket = socketIo(this.url);\n    console.log('initializing socket');\n    socket.on('connect', () => console.log('connected'));\n    socket.on('messages', messages => {\n      console.log('Message from external server');\n      console.log(messages);\n      socket.disconnect()\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/passport/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/passport/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: IJwtPayload, done: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/passport/jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport { AuthService } from '../auth.service';\nimport { SERVER_CONFIG } from '../../../server.constants';\nimport { IUser } from '../../users/interfaces/user.interface';\nimport { IJwtPayload } from '../interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: SERVER_CONFIG.jwtSecret\n    });\n  }\n\n  public async validate(payload: IJwtPayload, done: Function) {\n    const user: IUser = await this.authService.findUserById(payload.sub);\n\n    if (!user) {\n      return done(new UnauthorizedException(), false);\n    }\n\n    done(null, user);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/passport/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                userModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/passport/local.strategy.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/passport/local.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            userModel\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/modules/auth/passport/local.strategy.ts:16\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException, Inject } from '@nestjs/common';\nimport { Model, Connection } from 'mongoose';\nimport { use } from 'passport';\nimport { Strategy } from 'passport-local';\n\nimport { IUser } from '../../users/interfaces/user.interface';\nimport { UserSchema } from '../../users/schemas/user.schema';\n\nimport { generateHashedPassword, generateSalt } from '../../../utilities/encryption';\nimport { MESSAGES, USER_MODEL_TOKEN, DB_CONNECTION_TOKEN } from '../../../server.constants';\n\nimport { Request } from 'express';\n\n@Injectable()\nexport class LocalStrategy {\n  private userModel;\n  constructor() {\n    this.init();\n  }\n\n  private init(): void {\n    use('local-signin', new Strategy({\n      passReqToCallback: true,\n      usernameField: 'email',\n      passwordField: 'password'\n    }, async (req: Request, email: string, password: string, done: Function) => {\n      try {\n        const db = req['dbConnection'];\n        this.userModel = db.model(USER_MODEL_TOKEN, UserSchema) as Model;\n        const user: IUser = await this.userModel.findOne({ email: email });\n\n        if (!user) {\n          return done(new UnauthorizedException(MESSAGES.UNAUTHORIZED_INVALID_EMAIL), false);\n        }\n\n        if (generateHashedPassword(user.salt, password) !== user.password) {\n          return done(new UnauthorizedException(MESSAGES.UNAUTHORIZED_INVALID_PASSWORD), false);\n        }\n\n        done(null, user);\n      } catch (error) {\n        done(error, false);\n      }\n    }));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/logger.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            use\n                        \n                        \n                    \n                \n            \n            \n                \nuse(req, res, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middlewares/logger.middleware.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport * as chalk from 'chalk';\nimport { getMethodColor } from '../helpers/utils';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n\tuse(req, res, next: Function) {\n    let logMessage;\n    const log = chalk.default;\n    const methodColor = getMethodColor(req.method);\n    console.log(methodColor);\n    logMessage = `[URL]: ${req.baseUrl}`;\n    console.log(`[${log[methodColor](req.method)}]-${log.white(req.baseUrl)}`);\n    next();\n\t}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/guards/roles.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/roles.guard.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext, Inject } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {\n    console.log('Roles Guard is called');\n  }\n\n  async canActivate(context: ExecutionContext): Promise {\n    const roles = this.reflector.get('roles', context.getHandler());\n    if (!roles) {\n      return true;\n    }\n    const req = context.switchToHttp().getRequest();\n    const user = req.user;\n    const hasRole = () => user['roles'].some((role: string) => role.includes(role));\n    return user && user['roles'] && hasRole();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SharedVariables.html":{"url":"injectables/SharedVariables.html","title":"injectable - SharedVariables","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SharedVariables\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared-variables.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currentCounterValue\n                            \n                            \n                                    Private\n                                simpleCounter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeCounterValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/shared-variables.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changeCounterValue\n                        \n                        \n                    \n                \n            \n            \n                \nchangeCounterValue(number: number)\n                \n            \n\n\n            \n                \n                    Defined in src/shared-variables.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    number\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currentCounterValue\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : this.simpleCounter.asObservable()\n                        \n                    \n                        \n                            \n                                    Defined in src/shared-variables.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            simpleCounter\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new BehaviorSubject(0)\n                        \n                    \n                        \n                            \n                                    Defined in src/shared-variables.ts:10\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\n/**\n *  Function for local Observable Variables\n */\nexport class SharedVariables {\n\tconstructor() {}\n  private simpleCounter = new BehaviorSubject(0);\n\n  currentCounterValue = this.simpleCounter.asObservable();\n\n  changeCounterValue(number: number) {\n    this.simpleCounter.next(number);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TenantMiddleware.html":{"url":"injectables/TenantMiddleware.html","title":"injectable - TenantMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TenantMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/tenant.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(connection: Connection)\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/tenant.middleware.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        connection\n                                                  \n                                                        \n                                                                        Connection\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            use\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middlewares/tenant.middleware.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, Inject } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as chalk from 'chalk';\nimport { Connection } from 'mongoose';\n\nimport { DB_CONNECTION_TOKEN } from '../../server.constants';\nimport { getOrigin, getDatabaseFromOrigin } from '../helpers/utils';\n\n@Injectable()\nexport class TenantMiddleware implements NestMiddleware {\n\tconstructor(@Inject(DB_CONNECTION_TOKEN) private readonly connection: Connection) {\n\t}\t\n  \tasync use(req: Request, res: Response, next: Function) {\n  \t\tconst database = getDatabaseFromOrigin(getOrigin(req.headers.origin));\n  \t\tconsole.log(database);\n  \t\treq['dbConnection'] = this.connection.useDb(database);\n\t\tnext();\n\t}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenMiddleware.html":{"url":"injectables/TokenMiddleware.html","title":"injectable - TokenMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TokenMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/middlewares/token.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                userModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/common/middlewares/token.middleware.ts:14\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            use\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/common/middlewares/token.middleware.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            userModel\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/common/middlewares/token.middleware.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, Inject } from '@nestjs/common';\nimport { Request, Response } from 'express';\n\nimport * as chalk from 'chalk';\nimport { Model, Connection } from 'mongoose';\nimport { verify } from 'jsonwebtoken';\n\nimport { USER_MODEL_TOKEN, SERVER_CONFIG, DB_CONNECTION_TOKEN } from '../../server.constants';\nimport { IUser } from '../../modules/users/interfaces/user.interface';\nimport { UserSchema } from '../../modules/users/schemas/user.schema';\n\n@Injectable()\nexport class TokenMiddleware implements NestMiddleware {\n\tprivate userModel;\n\tconstructor() {\n\t}\t\n  \tasync use(req: Request, res: Response, next: Function) {\n\t\tconst db = req['dbConnection'];\n        this.userModel = db.model(USER_MODEL_TOKEN, UserSchema) as Model;\n\t\treq.user = {};\n\t\tlet parsedToken = {};\n\t\tconst token: any = req.headers.authorization || req.headers.Authorization;\n\t\tif (token) {\n\t\t\ttry {\n\t\t\t\tparsedToken = verify(token, SERVER_CONFIG.jwtSecret);\n\t\t\t\treq.user =  await this.userModel.findById(parsedToken['_id']).select('-salt -password');\n\t\t\t} catch (ex) {\n\t\t\t\treturn res.status(500).send(ex);\n\t\t\t}\n\t\t}\n\t\tnext();\n\t}\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwitterStrategy.html":{"url":"injectables/TwitterStrategy.html","title":"injectable - TwitterStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TwitterStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/passport/twitter.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                userModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(twitterConfig: ITwitterConfig)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/passport/twitter.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        twitterConfig\n                                                  \n                                                        \n                                                                        ITwitterConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/passport/twitter.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            userModel\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/modules/auth/passport/twitter.strategy.ts:17\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { Model, Connection } from 'mongoose';\nimport { use } from 'passport';\n\nimport { USER_MODEL_TOKEN, TWITTER_CONFIG_TOKEN, DB_CONNECTION_TOKEN } from '../../../server.constants';\nimport { IUser } from '../../users/interfaces/user.interface';\nimport { UserSchema } from '../../users/schemas/user.schema';\n\nimport { Request } from 'express';\n\nimport { ITwitterConfig } from '../interfaces/twitter-config.interface';\n\nconst TwitterTokenStrategy = require('passport-twitter-token');\n\n@Injectable()\nexport class TwitterStrategy {\n  private userModel;\n  constructor(\n    @Inject(TWITTER_CONFIG_TOKEN) private readonly twitterConfig: ITwitterConfig\n  ) {\n    this.init();\n  }\n\n  private init(): void {\n    use('twitter', new TwitterTokenStrategy({\n      passReqToCallback: true,\n      consumerKey: this.twitterConfig.consumer_key,\n      consumerSecret: this.twitterConfig.consumer_secret\n    }, async (req: Request, accessToken: string, refreshToken: string, profile: any, done: Function) => {\n      try {\n        const db = req['dbConnection'];\n        this.userModel = db.model(USER_MODEL_TOKEN, UserSchema) as Model;        const existingUser: IUser = await this.userModel.findOne({ 'twitter.id': profile.id });\n\n        if (existingUser) {\n          return done(null, existingUser);\n        }\n\n        const { id, username, displayName } = profile;\n        const user: IUser = new this.userModel({\n          method: 'twitter',\n          roles: ['user'],\n          displayName,\n          twitter: {\n            id,\n            username\n          }\n        });\n\n        done(null, await user.save());\n      } catch (err) {\n        done(err, null);\n      }\n    }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserIdMiddleware.html":{"url":"injectables/UserIdMiddleware.html","title":"injectable - UserIdMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserIdMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/middlewares/userbyId.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                userModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/middlewares/userbyId.middleware.ts:18\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            use\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    use(request, response, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/middlewares/userbyId.middleware.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            userModel\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/modules/users/middlewares/userbyId.middleware.ts:18\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { \n  BadRequestException,\n  UnauthorizedException,\n  NestMiddleware, \n  Injectable, \n  Inject } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { Model, Types, Connection } from 'mongoose';\nimport { IUser } from './../interfaces/user.interface';\nimport { UserSchema } from './../schemas/user.schema';\n\nimport { MESSAGES, USER_MODEL_TOKEN } from '../../../server.constants';\n\nimport { REQUEST } from '@nestjs/core';\n\n@Injectable()\nexport class UserIdMiddleware implements NestMiddleware {\n  private userModel;\n  constructor() {\n  }\n    async use(request, response, next: Function) {\n      const db = request['dbConnection'];\n      this.userModel = db.model(USER_MODEL_TOKEN, UserSchema) as Model;\n      const allowedRoutes = ['me', 'upload'];\n      const isAllowedRoute = (allowedRoutes.indexOf(request.params.id) > -1);\n      if(isAllowedRoute) return next();\n\n      else if(!Types.ObjectId.isValid(request.params.id)) return next(new UnauthorizedException('User is invalid'));\n      const user = await this.userModel.findById(request.params.id).select('-local.salt  -local.hashedPassword');\n      if (user) {\n        request.model = user;\n        next();\n      }\n      else return next(new UnauthorizedException('No user with that identifier has been found'));\n    };\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                params\n                            \n                            \n                                    Private\n                                userModel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                            \n                                    Async\n                                me\n                            \n                            \n                                    Async\n                                updateProfileImage\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(user)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers(query?)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            me\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    me(userModel: IUser)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userModel\n                                    \n                                                IUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateProfileImage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateProfileImage(user, file)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(user, body)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            params\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/modules/users/users.service.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            userModel\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/modules/users/users.service.ts:17\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { Model, Connection } from 'mongoose';\n\nimport { USER_MODEL_TOKEN, SERVER_CONFIG } from '../../server.constants';\nimport { IUser } from './interfaces/user.interface';\nimport { UserSchema } from './schemas/user.schema';\n\nimport { isEmptyObject } from '../../common/helpers/utils';\n\nimport { parseImageURL } from '../../common/helpers/converters';\n\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\n@Injectable()\nexport class UserService {\n    private userModel;\n    private params;\n    constructor(@Inject(REQUEST) private readonly request: Request) {\n        const db = request['dbConnection'];\n        this.userModel = db.model(USER_MODEL_TOKEN, UserSchema) as Model;\n    }\n\n    async me(userModel: IUser) {\n        return userModel;\n    }\n\n    async getUsers(query?): Promise {\n        return await this.userModel.find(query).select('-salt  -password');\n    }\n\n    async updateProfileImage(user, file): Promise {\n        user.profileImageURL = file.location || `/${parseImageURL(file.path)}`;\n        return await user.save();\n    }\n\n    async getUserById(userId): Promise {\n        return await this.userModel.findById(userId).select('-salt -password');\n    }\n\n    async deleteUser(user) {\n        return await user.remove();\n    }\n\n    async updateUser(user, body) {\n        const google = user.google.id;\n        const local = user.local.email;\n        const twitter = user.twitter.id;\n        const facebook = user.facebook.id;\n\n        if(google) {\n          //  Do stuff updating google\n      } else if (twitter) {\n          //  Do stuff updating twitter\n      } else if (facebook) {\n          //  Do stuff updating facebook\n      } else {\n          //  Do stuff updating local\n      }\n      return user;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                            \n                                    Async\n                                me\n                            \n                            \n                                    Async\n                                updateUserById\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@Roles('admin', 'superadmin')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('user', 'admin', 'superadmin')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            me\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    me(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserById(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@Roles('user', 'admin')\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            uploadFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadFile(file, req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('upload')@Roles('user', 'admin')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { \n  Controller,\n  Post, \n  Get,\n  Put,\n  Delete,\n  Param,\n  Req, \n  UseGuards, \n  UploadedFile, \n  UseInterceptors } from '@nestjs/common';\n\n  import { FileInterceptor } from '@nestjs/platform-express';\n\nimport { UserService } from './users.service';\n\n// Guards\nimport { RolesGuard } from '../../guards/roles.guard';\nimport { Roles } from '../../decorators/roles.decorator';\n\nimport { MulterConfig } from '../../config/multer';\n\n@Controller('users')\n@UseGuards(RolesGuard)\nexport class UsersController {\n  constructor(private readonly userService: UserService) {}\n  /* --------------------------------------------------------------------\n\n    Module     : Users\n    Controller : User Controller\n\n    ---------------------------------------------------------------------\n\n    Description :\n    \n    Aditional information: All role routes are working with Guards, and Guards \n    are defining the current req.user value.\n\n    Middleware description: \n\n    Route:\n    /api/users    \n   ----------------------------------------------------------------------*/\n\n  /* \n    Route:        GET api/users/me \n    Roles:        user, admin\n    Description:  Get the current session user information based in authenticated token.\n  */\n\n  @Get('me')\n  @Roles('user', 'admin')\n  async me(@Req() req) {\n  \treturn await this.userService.me(req.user);\n  }\n\n  /* \n    Route:        PUT api/users/upload \n    Roles:        user, admin\n    Description:  Get user by provided Id.\n  */\n\n  @Put('upload')\n  @Roles('user', 'admin')\n  @UseInterceptors(FileInterceptor('file', MulterConfig))\n  async uploadFile(@UploadedFile() file, @Req() req) {\n    const user = req.user;\n    return await this.userService.updateProfileImage(user, file);\n  }\n\n  /* \n    Route:        GET api/users/:id \n    Roles:        user, admin\n    Description:  Get user by provided Id.\n  */\n\n  @Get(':id')\n  @Roles('user', 'admin')\n  async getUserById(@Req() req) {\n    let user = req.model;\n    return user;\n  }\n\n  /* \n    Route:        PUT api/users/:id \n    Roles:        user, admin\n    Description:  Get user by provided Id.\n  */\n\n  @Put(':id')\n  @Roles('user', 'admin')\n  async updateUserById(@Req() req) {\n    const user = await this.userService.updateUser(req.model, req.body);\n    return user;\n  }\n\n  /* \n    Route:        GET api/users \n    Roles:        user, admin, superadmin\n    Description:  Get all users in database.\n  */\n  @Get()\n  @Roles('user', 'admin', 'superadmin')\n  async getUsers(@Req() req) {\n    let query = req.query;\n    return await this.userService.getUsers(query);\n  }\n\n  /* \n    Route:        DELETE api/users \n    Roles:        admin, superadmin\n    Description:  Delete user provide by id.\n  */\n\n  @Delete(':id')\n  @Roles('admin', 'superadmin')\n  async deleteUser(@Req() req) {\n    const user = req.model;\n    return await this.userService.deleteUser(user);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/users/users.module.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Module, NestModule, MiddlewareConsumer, RequestMethod } from '@nestjs/common';\n\nimport { DatabaseModule } from '../../database';\nimport { UsersController } from './users.controller';\nimport { userProviders } from './users.providers';\nimport { UserService } from './users.service';\n\nimport { UserIdMiddleware } from './middlewares/userbyId.middleware';\n//  Middlewares\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [UsersController],\n  providers: [\n    ...userProviders,\n    UserService\n  ],\n  exports: [\n    ...userProviders\n  ]\n})\nexport class UsersModule implements NestModule {\n    constructor() {\n      // code...\n      console.log('users module loaded');\n    }\n  public configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(UserIdMiddleware)\n      .forRoutes({ path: 'users/:id', method: RequestMethod.ALL });\n      //  users id calling middleware for findById users before run another methods like \"delete/update/read\"\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Verifier.html":{"url":"injectables/Verifier.html","title":"injectable - Verifier","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  Verifier\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/passport/verifier.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/passport/verifier.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            use\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/passport/verifier.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, NestMiddleware, UnauthorizedException, Injectable, Inject } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { Model } from 'mongoose';\nimport { IUser } from '../../users/interfaces/user.interface';\nimport { UserSchema } from '../../users/schemas/user.schema';\nimport { MESSAGES, USER_MODEL_TOKEN } from '../../../server.constants';\n\n@Injectable()\nexport class Verifier implements NestMiddleware {\n  constructor() {}\n    async use(req: Request, res: Response, next: Function) {\n\t\tconst db = req['dbConnection'];\n\t\tthis.userModel = db.model(USER_MODEL_TOKEN, UserSchema) as Model;\n\t\tconst user = await this.userModel.findOne({ email: req.body.email });\n\t\tif (!user) next();\n\t\telse return next(new UnauthorizedException(MESSAGES.UNAUTHORIZED_EMAIL_OR_USERNAME_IN_USE));\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/articleValidatorMiddleware.html":{"url":"injectables/articleValidatorMiddleware.html","title":"injectable - articleValidatorMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  articleValidatorMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/articles/middlewares/article-validator.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/articles/middlewares/article-validator.middleware.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            use\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req, res, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/articles/middlewares/article-validator.middleware.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  NestMiddleware, \n  Injectable, \n  Inject } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { validate } from 'joi';\nimport { articleSchema } from '../../articles/joi/article.joi';\n\nimport { Model, Types } from 'mongoose';\nimport { IArticle } from '../../articles/interfaces/article.interface';\nimport { MESSAGES, ARTICLE_MODEL_TOKEN } from '../../../server.constants';\n\n@Injectable()\n/**\n *  Article By Id Middleware\n *  We validating if the Id provided is valid, and returning the found article in the variable req.article\n */\nexport class articleValidatorMiddleware implements NestMiddleware {\n  constructor() {\n  }\n  async use(req, res, next: Function) {\n    const result = validate(req.body, articleSchema);\n\n    if (result.error) {\n      const errorMessage = result.error.details.shift().message;\n      const message: string = errorMessage.replace(/[\"]/g, '');\n\n      return next(new BadRequestException(`Validation failed: ${message}`));\n    }\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/bodyValidatorMiddleware.html":{"url":"injectables/bodyValidatorMiddleware.html","title":"injectable - bodyValidatorMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  bodyValidatorMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/middlewares/body-validator.middleware.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/middlewares/body-validator.middleware.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            use\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req, res, next: Function)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/middlewares/body-validator.middleware.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                Function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  NestMiddleware, \n  Injectable } from '@nestjs/common';\nimport { validate } from 'joi';\nimport { authUserSchema } from '../../users/joi/auth-user.joi';\n\n@Injectable()\n/**\n *  Article By Id Middleware\n *  We validating if the Id provided is valid, and returning the found article in the variable req.article\n */\nexport class bodyValidatorMiddleware implements NestMiddleware {\n  constructor() {\n    console.log('Initializing Body Validator Middleware');\n  }\n  async use(req, res, next: Function) {\n    console.log('HI, IM A MIDDLEWARE');\n    const result = validate(req.body, authUserSchema);\n\n    if (result.error) {\n      const errorMessage = result.error.details.shift().message;\n      const message: string = errorMessage.replace(/[\"]/g, '');\n\n      return next(new BadRequestException(`Validation failed: ${message}`));\n    }\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.gateway.ts\n            \n            class\n            AppGateway\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/helpers/class.ts\n            \n            class\n            DoStuff\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/helpers/converters.ts\n            \n            variable\n            parseImageURL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/error-handler.ts\n            \n            function\n            getErrorMessage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/helpers/error-handler.ts\n            \n            function\n            getUniqueErrorMessage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/helpers/utils.ts\n            \n            function\n            getAllowedDatabases\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/utils.ts\n            \n            function\n            getDatabaseFromOrigin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/utils.ts\n            \n            function\n            getMethodColor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/utils.ts\n            \n            function\n            getOrigin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/helpers/utils.ts\n            \n            function\n            isEmptyObject\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/middlewares/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/middlewares/tenant.middleware.ts\n            \n            injectable\n            TenantMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/middlewares/token.middleware.ts\n            \n            injectable\n            TokenMiddleware\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            interface\n            IConfig\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            interface\n            IEnvironmentConfig\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            variable\n            Config\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            variable\n            environmentService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            variable\n            jwtSecret\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/config.ts\n            \n            variable\n            rootPath\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer.ts\n            \n            variable\n            environmentService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer.ts\n            \n            variable\n            MulterConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config/multer.ts\n            \n            variable\n            storage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/database/database.providers.ts\n            \n            variable\n            databaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/database.providers.ts\n            \n            variable\n            opts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/environment.variables.ts\n            \n            class\n            EnvironmentService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            log\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/articles/articles.controller.ts\n            \n            controller\n            ArticlesController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/articles/articles.gateway.ts\n            \n            class\n            ArticlesGateway\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/articles/articles.providers.ts\n            \n            variable\n            articleProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/articles/articles.service.ts\n            \n            injectable\n            ArticlesService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/articles/interfaces/article.interface.ts\n            \n            interface\n            IArticle\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/modules/articles/joi/article.joi.ts\n            \n            variable\n            articleSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/articles/middlewares/article-validator.middleware.ts\n            \n            injectable\n            articleValidatorMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/articles/middlewares/articleById.middleware.ts\n            \n            injectable\n            ArticleIdMiddleware\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/articles/schemas/article.schema.ts\n            \n            variable\n            ArticleSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.providers.ts\n            \n            variable\n            authProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/modules/auth/config/facebook-config.ts\n            \n            variable\n            facebookConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/config/google-config.ts\n            \n            variable\n            googleConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/config/twitter-config.ts\n            \n            variable\n            twitterConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/facebook-config.interface.ts\n            \n            interface\n            IFacebookConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/google-config.interface.ts\n            \n            interface\n            IGoogleConfig\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            IJwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/token.interface.ts\n            \n            interface\n            IToken\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/interfaces/twitter-config.interface.ts\n            \n            interface\n            ITwitterConfig\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/auth/middlewares/body-validator.middleware.ts\n            \n            injectable\n            bodyValidatorMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/facebook.strategy.ts\n            \n            injectable\n            FacebookStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/facebook.strategy.ts\n            \n            variable\n            FacebookTokenStrategy\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/google-plus.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/google-plus.strategy.ts\n            \n            variable\n            GoogleTokenStrategy\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/twitter.strategy.ts\n            \n            injectable\n            TwitterStrategy\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/twitter.strategy.ts\n            \n            variable\n            TwitterTokenStrategy\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/passport/verifier.ts\n            \n            injectable\n            Verifier\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/interfaces/user.interface.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/modules/users/joi/auth-user.joi.ts\n            \n            variable\n            authUserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/middlewares/userbyId.middleware.ts\n            \n            injectable\n            UserIdMiddleware\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/users/schemas/user.schema.ts\n            \n            function\n            validateUsername\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/schemas/user.schema.ts\n            \n            variable\n            illegalUsernames\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/users/users.providers.ts\n            \n            variable\n            userProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            ARTICLE_MODEL_TOKEN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            DB_CONNECTION_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            env\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            envService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            FACEBOOK_CONFIG_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            GOOGLE_CONFIG_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            MESSAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            SERVER_CONFIG\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            SERVER_CONFIG_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            TWITTER_CONFIG_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/server.constants.ts\n            \n            variable\n            USER_MODEL_TOKEN\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/shared-variables.ts\n            \n            injectable\n            SharedVariables\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/utilities/encryption.ts\n            \n            variable\n            generateHashedPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utilities/encryption.ts\n            \n            variable\n            generateSalt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utilities/io-connector/io.ts\n            \n            class\n            IoConnector\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/utilities/keys.ts\n            \n            function\n            extractKey\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nest/microservices : ^4.5.4\n        \n            @nestjs/common : ^6.0.0\n        \n            @nestjs/core : ^6.0.0\n        \n            @nestjs/mongoose : ^6.0.0\n        \n            @nestjs/passport : ^6.0.0\n        \n            @nestjs/platform-express : ^6.0.0\n        \n            @nestjs/platform-socket.io : ^6.0.5\n        \n            @nestjs/websockets : ^6.0.5\n        \n            @types/cookie-parser : ^1.4.1\n        \n            @types/helmet : 0.0.43\n        \n            @types/joi : ^14.3.2\n        \n            @types/mongoose : ^5.3.25\n        \n            @types/multer-s3 : ^2.7.6\n        \n            @types/passport : ^1.0.0\n        \n            @types/passport-jwt : ^3.0.1\n        \n            @types/passport-local : ^1.0.33\n        \n            @types/request : ^2.48.1\n        \n            @types/uuid : ^3.4.4\n        \n            @types/ws : ^6.0.1\n        \n            aws-sdk : ^2.437.0\n        \n            chalk : ^2.4.2\n        \n            class-transformer : ^0.2.0\n        \n            class-validator : ^0.9.1\n        \n            dotenv : ^7.0.0\n        \n            joi : ^14.3.1\n        \n            mongoose : ^5.5.0\n        \n            multer-s3 : ^2.9.0\n        \n            node-request-context : ^1.0.5\n        \n            nodemailer : ^6.1.0\n        \n            oauth2-server : ^3.0.1\n        \n            passport : ^0.4.0\n        \n            passport-facebook-token : ^3.3.0\n        \n            passport-google-plus-token : ^2.1.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            passport-twitter-token : ^1.3.0\n        \n            reflect-metadata : ^0.1.12\n        \n            rimraf : ^2.6.2\n        \n            rxjs : ^6.3.3\n        \n            socket.io-client : ^2.2.0\n        \n            ts-loader : ^5.3.3\n        \n            uuid : ^3.3.2\n        \n            ws : ^6.2.1\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            extractKey   (src/.../keys.ts)\n                        \n                        \n                            getAllowedDatabases   (src/.../utils.ts)\n                        \n                        \n                            getDatabaseFromOrigin   (src/.../utils.ts)\n                        \n                        \n                            getErrorMessage   (src/.../error-handler.ts)\n                        \n                        \n                            getMethodColor   (src/.../utils.ts)\n                        \n                        \n                            getOrigin   (src/.../utils.ts)\n                        \n                        \n                            getUniqueErrorMessage   (src/.../error-handler.ts)\n                        \n                        \n                            isEmptyObject   (src/.../utils.ts)\n                        \n                        \n                            validateUsername   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utilities/keys.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            extractKey\n                        \n                        \n                    \n                \n            \n            \n                \nextractKey(path)\n                \n            \n\n\n\n\n            \n                \n                    This function is for extract any key from a file, see ./keys file\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/common/helpers/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getAllowedDatabases\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllowedDatabases()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDatabaseFromOrigin\n                        \n                        \n                    \n                \n            \n            \n                \ngetDatabaseFromOrigin(origin)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    origin\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMethodColor\n                        \n                        \n                    \n                \n            \n            \n                \ngetMethodColor(method)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    method\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getOrigin\n                        \n                        \n                    \n                \n            \n            \n                \ngetOrigin(url)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isEmptyObject\n                        \n                        \n                    \n                \n            \n            \n                \nisEmptyObject(value)\n                \n            \n\n\n\n\n            \n                \n                    Defines if the provided parameter is an empty object {} or not\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/common/helpers/error-handler.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            getErrorMessage\n                        \n                        \n                    \n                \n            \n            \n                \ngetErrorMessage(err)\n                \n            \n\n\n\n\n            \n                \n                    Get the error message from error object\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUniqueErrorMessage\n                        \n                        \n                    \n                \n            \n            \n                \ngetUniqueErrorMessage(err)\n                \n            \n\n\n\n\n            \n                \n                    Verifies the unique error un mongo\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/modules/users/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            validateUsername\n                        \n                        \n                    \n                \n            \n            \n                \nvalidateUsername(username)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nbash\n$ npm install\nRunning the app\n```bash\ndevelopment\n$ npm run start\nwatch mode\n$ npm run start:dev\nproduction mode\n$ npm run start:prod\n```\nTest\n```bash\nunit tests\n$ npm run test\ne2e tests\n$ npm run test:e2e\ntest coverage\n$ npm run test:cov\n```\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\"# Nest-Scaffold\" \n\"# store-v2.0\" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ArticlesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ArticlesModule\n\n\n\ncluster_ArticlesModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nArticlesModule\n\nArticlesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nArticlesModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nArticlesModule -->\n\nDatabaseModule->ArticlesModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nArticlesService\n\nArticlesService\n\nArticlesModule -->\n\nArticlesService->ArticlesModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nFacebookStrategy\n\nFacebookStrategy\n\nAuthModule -->\n\nFacebookStrategy->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTwitterStrategy\n\nTwitterStrategy\n\nAuthModule -->\n\nTwitterStrategy->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    17 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ARTICLE_MODEL_TOKEN   (src/.../server.constants.ts)\n                        \n                        \n                            articleProviders   (src/.../articles.providers.ts)\n                        \n                        \n                            articleSchema   (src/.../article.joi.ts)\n                        \n                        \n                            ArticleSchema   (src/.../article.schema.ts)\n                        \n                        \n                            authProviders   (src/.../auth.providers.ts)\n                        \n                        \n                            authUserSchema   (src/.../auth-user.joi.ts)\n                        \n                        \n                            Config   (src/.../config.ts)\n                        \n                        \n                            databaseProviders   (src/.../database.providers.ts)\n                        \n                        \n                            DB_CONNECTION_TOKEN   (src/.../server.constants.ts)\n                        \n                        \n                            env   (src/.../server.constants.ts)\n                        \n                        \n                            environmentService   (src/.../config.ts)\n                        \n                        \n                            environmentService   (src/.../multer.ts)\n                        \n                        \n                            envService   (src/.../server.constants.ts)\n                        \n                        \n                            FACEBOOK_CONFIG_TOKEN   (src/.../server.constants.ts)\n                        \n                        \n                            facebookConfig   (src/.../facebook-config.ts)\n                        \n                        \n                            FacebookTokenStrategy   (src/.../facebook.strategy.ts)\n                        \n                        \n                            generateHashedPassword   (src/.../encryption.ts)\n                        \n                        \n                            generateSalt   (src/.../encryption.ts)\n                        \n                        \n                            GOOGLE_CONFIG_TOKEN   (src/.../server.constants.ts)\n                        \n                        \n                            googleConfig   (src/.../google-config.ts)\n                        \n                        \n                            GoogleTokenStrategy   (src/.../google-plus.strategy.ts)\n                        \n                        \n                            illegalUsernames   (src/.../user.schema.ts)\n                        \n                        \n                            jwtSecret   (src/.../config.ts)\n                        \n                        \n                            log   (src/.../main.ts)\n                        \n                        \n                            MESSAGES   (src/.../server.constants.ts)\n                        \n                        \n                            MulterConfig   (src/.../multer.ts)\n                        \n                        \n                            opts   (src/.../database.providers.ts)\n                        \n                        \n                            parseImageURL   (src/.../converters.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            rootPath   (src/.../config.ts)\n                        \n                        \n                            SERVER_CONFIG   (src/.../server.constants.ts)\n                        \n                        \n                            SERVER_CONFIG_TOKEN   (src/.../server.constants.ts)\n                        \n                        \n                            storage   (src/.../multer.ts)\n                        \n                        \n                            TWITTER_CONFIG_TOKEN   (src/.../server.constants.ts)\n                        \n                        \n                            twitterConfig   (src/.../twitter-config.ts)\n                        \n                        \n                            TwitterTokenStrategy   (src/.../twitter.strategy.ts)\n                        \n                        \n                            USER_MODEL_TOKEN   (src/.../server.constants.ts)\n                        \n                        \n                            userProviders   (src/.../users.providers.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/server.constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ARTICLE_MODEL_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'Article'\n                        \n                    \n\n                \n                    \n                        Token for Article model\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            DB_CONNECTION_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'DbConnectionToken'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            env\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : envService.get('NODE_ENV') || 'development'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            envService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new EnvironmentService('.env')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FACEBOOK_CONFIG_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'FacebookConfigToken'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            GOOGLE_CONFIG_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'GoogleConfigToken'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MESSAGES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  UNAUTHORIZED_EMAIL_OR_USERNAME_IN_USE: 'Email or username already exists',\n  UNAUTHORIZED_INVALID_PASSWORD: 'Invalid password',\n  UNAUTHORIZED_INVALID_EMAIL: 'The email does not exist',\n  UNAUTHORIZED_UNRECOGNIZED_BEARER: 'Unrecognized bearer of the token'\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SERVER_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IEnvironmentConfig\n\n                        \n                    \n                    \n                        \n                            Default value : Config[env]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SERVER_CONFIG_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'ServerConfigToken'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TWITTER_CONFIG_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'TwitterConfigToken'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            USER_MODEL_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'User'\n                        \n                    \n\n                \n                    \n                        Token for User  model\n\n                    \n                \n\n            \n        \n\n    src/modules/articles/articles.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            articleProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [{\n        provide: ARTICLE_MODEL_TOKEN,\n        useFactory: (connection: Connection) => connection.model('Article', ArticleSchema),\n        inject: [DB_CONNECTION_TOKEN]\n}]\n                        \n                    \n\n\n            \n        \n\n    src/modules/articles/joi/article.joi.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            articleSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectSchema\n\n                        \n                    \n                    \n                        \n                            Default value : object({\n  title: string().required(),\n  content: string().required()\n})\n                        \n                    \n\n                \n                    \n                        Article Schema Declaration (Before REST communication)\n\n                    \n                \n\n            \n        \n\n    src/modules/articles/schemas/article.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            ArticleSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Schema\n\n                        \n                    \n                    \n                        \n                            Default value : new Schema({\n  created: {\n    type: Date,\n    default: new Date()\n  },\n  title: {\n    type: String,\n    required: 'Title cannot be blank'\n  },\n  content: {\n    type: String,\n    default: ''\n  },\n  creator: {\n    type: Schema.Types.ObjectId,\n    ref: 'User'\n  }\n})\n                        \n                    \n\n                \n                    \n                        Article Schema Declaration for Mongodb, declarated by mongoose schema\n\n                    \n                \n\n            \n        \n\n    src/modules/auth/auth.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            authProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  {\n    provide: FACEBOOK_CONFIG_TOKEN,\n    useValue: facebookConfig\n  },\n  {\n    provide: TWITTER_CONFIG_TOKEN,\n    useValue: twitterConfig\n  },\n  {\n    provide: GOOGLE_CONFIG_TOKEN,\n    useValue: googleConfig\n  }\n]\n                        \n                    \n\n\n            \n        \n\n    src/modules/users/joi/auth-user.joi.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            authUserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectSchema\n\n                        \n                    \n                    \n                        \n                            Default value : object({\n  firstName: string().required(),\n  lastName: string().required(),\n  username: string().required(),\n  email: string().email().required(),\n  password: string().alphanum().min(6).max(36).required()\n})\n                        \n                    \n\n\n            \n        \n\n    src/config/config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  development: {\n    rootPath,\n    db_uri: 'mongodb://localhost:27017/default',\n    dbs: environmentService.get('DBS'),\n    httpPort: 1337,\n    wsPort: 1338,\n    jwtSecret,\n    domain: 'localhost',\n    httpProtocol: 'http',\n    wsProtocol: 'ws',\n    awsKey: environmentService.get('AWS_KEY'),\n    awsSecret: environmentService.get('AWS_SECRET')\n  },\n  production: {\n    rootPath,\n    db_uri: 'mongodb://localhost:27017/default',   \n    dbs: environmentService.get('DBS'), \n    httpPort: + environmentService.get('HTTP_SERVER_PORT'),\n    wsPort: + environmentService.get('WS_PORT'),\n    jwtSecret,\n    domain: environmentService.get('DOMAIN'),\n    httpProtocol: environmentService.get('HTTP_PROTOCOL'),\n    wsProtocol: environmentService.get('WS_PROTOCOL'),\n    awsKey: environmentService.get('AWS_KEY'),\n    awsSecret: environmentService.get('AWS_SECRET')\n  }\n}\n                        \n                    \n\n                \n                    \n                        Definimos los valores para local y produccion\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            environmentService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new EnvironmentService('.env')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            jwtSecret\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : extractKey(`${rootPath}/keys/jwt.private.key`)\n                        \n                    \n\n                \n                    \n                        En la constante jwtSecret asignamos la llave creada en /keys/jwt.private.key\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rootPath\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.cwd()\n                        \n                    \n\n                \n                    \n                        Seteamos la variable rootPath, para saber la ruta en la cual se encuentra el servidor.\n\n                    \n                \n\n            \n        \n\n    src/database/database.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            databaseProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [{\n    provide: DB_CONNECTION_TOKEN,\n    useFactory: async () => {\n        try {\n            console.log(`Connecting to ${SERVER_CONFIG.db_uri}`);\n            return await createConnection(`${SERVER_CONFIG.db_uri}`, opts);\n        } catch (ex) {\n            console.log(ex);\n        }\n    }   \n}]\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            opts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    useCreateIndex: true,\n    useNewUrlParser: true,\n    keepAlive: true,\n    socketTimeoutMS: 30000,\n    poolSize: 100,\n    reconnectTries: Number.MAX_VALUE,\n    reconnectInterval: 500,\n    autoReconnect: true,\n  }\n                        \n                    \n\n\n            \n        \n\n    src/config/multer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            environmentService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new EnvironmentService('.env')\n                        \n                    \n\n                \n                    \n                        New instance of environment service class\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MulterConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  storage: storage\n}\n                        \n                    \n\n                \n                    \n                        Creating variable for exportation\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            storage\n                            \n                        \n                    \n                \n\n                \n                    \n                        creating storage variable, this variable will get the configuration (local or production)\n\n                    \n                \n\n            \n        \n\n    src/modules/auth/config/facebook-config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            facebookConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IFacebookConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  login_dialog_uri: 'https://www.facebook.com/v2.12/dialog/oauth',\n  access_token_uri: 'https://graph.facebook.com/v2.12/oauth/access_token',\n  client_id: '448307408974851',\n  client_secret: '4bef83a9a03d5c81445896dbc623b01d',\n  oauth_redirect_uri: 'http://localhost:4200/index',\n  state: '{fbstate}'\n}\n                        \n                    \n\n\n            \n        \n\n    src/modules/auth/passport/facebook.strategy.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FacebookTokenStrategy\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('passport-facebook-token')\n                        \n                    \n\n\n            \n        \n\n    src/utilities/encryption.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            generateHashedPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : (salt, password) => {\n  return createHmac('sha256', salt).update(password).digest('hex');\n}\n                        \n                    \n\n                \n                    \n                        Generating hashed password for the provided salt, password\nParams - Salt - password\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            generateSalt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : () => {\n  return randomBytes(128).toString('base64');\n}\n                        \n                    \n\n                \n                    \n                        Salt generator for password and user schema\nParams - none\n\n                    \n                \n\n            \n        \n\n    src/modules/auth/config/google-config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            googleConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IGoogleConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  login_dialog_uri: 'https://accounts.google.com/o/oauth2/auth',\n  client_id: '342352192956-dr6rht4d8neev4lsf11inalma1j86rrf.apps.googleusercontent.com',\n  client_secret: 'PKiHC4-jos975AffhQgSLcR6',\n  oauth_redirect_uri: 'http://localhost:4200/index',\n  access_token_uri: 'https://accounts.google.com/o/oauth2/token',\n  response_type: 'code',\n  scopes: [\n    'https://www.googleapis.com/auth/plus.login',\n    'https://www.googleapis.com/auth/plus.profile.emails.read'\n  ],\n  grant_type: 'authorization_code'\n}\n                        \n                    \n\n\n            \n        \n\n    src/modules/auth/passport/google-plus.strategy.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GoogleTokenStrategy\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('passport-google-plus-token')\n                        \n                    \n\n\n            \n        \n\n    src/modules/users/schemas/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            illegalUsernames\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : ['meanjs', 'administrator', 'password', 'admin', 'user', 'unknown', 'anonymous', 'null', 'undefined', 'api']\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Schema\n\n                        \n                    \n                    \n                        \n                            Default value : new Schema({\n  created: {\n    type: Date,\n    default: new Date()\n  },\n  firstName: {\n    type: String,\n    required: 'First name is required'\n  },\n  lastName: {\n    type: String,\n    required: 'Last name is required'\n  },\n  displayName: {\n    type: String,\n    trim: true\n  },\n  email: {\n    type: String,\n    index: {\n      unique: true,\n      sparse: true // For this to work on a previously indexed field, the index must be dropped & the application restarted.\n    },\n    lowercase: true,\n    trim: true,\n  },\n  username: {\n    type: String,\n    unique: 'Username already exists',\n    required: 'Please fill in a username',\n    validate: [validateUsername, 'Please enter a valid username: 3+ characters long, non restricted word, characters \"_-.\", no consecutive dots, does not begin or end with dots, letters a-z and numbers 0-9.'],\n    lowercase: true,\n    trim: true\n  },\n  active: {\n    type: Boolean,\n    default: false\n  },\n  password: {\n    type: String,\n    default: ''\n  },\n  profileImageURL: {\n    type: String,\n    default: '/modules/users/client/img/profile/default.png'\n  },\n  salt: {\n    type: String\n  },\n  provider: {\n    type: String,\n    required: 'Provider is required'\n  },\n  providerData: {},\n  additionalProvidersData: {},\n  roles: {\n    type: [{\n      type: String,\n      enum: ['user', 'admin']\n    }],\n    default: ['user'],\n    required: 'Please provide at least one role'\n  },\n  updated: {\n    type: Date\n  },\n  /* For reset password */\n  resetPasswordToken: {\n    type: String\n  },\n  resetPasswordExpires: {\n    type: Date\n  }\n})\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            log\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : chalk.default\n                        \n                    \n\n\n            \n        \n\n    src/common/helpers/converters.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            parseImageURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (url) => {\n\tconsole.log(url);\n\treturn url;\n}\n                        \n                    \n\n\n            \n        \n\n    src/decorators/roles.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...roles: string[]) => SetMetadata('roles', roles)\n                        \n                    \n\n\n            \n        \n\n    src/modules/auth/config/twitter-config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            twitterConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ITwitterConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  consumer_key: 'gkeY5a5pIuKSwTRDNJwqnyCDZ',\n  consumer_secret: 'XCrSo4BXergVa9TIfCaK1oNLCdM53cBu75RMevVBDZ3jnB7dQN',\n  request_token_uri: 'https://api.twitter.com/oauth/request_token',\n  login_dialog_uri: 'https://api.twitter.com/oauth/authenticate',\n  access_token_uri: 'https://api.twitter.com/oauth/access_token',\n  oauth_redirect_uri: 'http://localhost:4200/recipes'\n}\n                        \n                    \n\n\n            \n        \n\n    src/modules/auth/passport/twitter.strategy.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TwitterTokenStrategy\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('passport-twitter-token')\n                        \n                    \n\n\n            \n        \n\n    src/modules/users/users.providers.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            userProviders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [{\n        provide: USER_MODEL_TOKEN,\n        useFactory: (connection: Connection) => connection.model('User', UserSchema),\n        inject: [DB_CONNECTION_TOKEN]\n}]\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
